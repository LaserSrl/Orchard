/*
** NOTE: This file is generated by Gulp and should not be edited directly!
** Any changes made directly to this file will be overwritten next time its asset group is processed by Gulp.
*/

var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 * --------------------------------------------------------------------------
 * Bootstrap (v4.6.1): util.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */
System.register("util", ["jquery"], function (exports_1, context_1) {
    "use strict";
    var __moduleName = context_1 && context_1.id;
    // Shoutout AngusCroll (https://goo.gl/pxwQGp)
    function toType(obj) {
        if (obj === null || typeof obj === 'undefined') {
            return "" + obj;
        }
        return {}.toString.call(obj).match(/\s([a-z]+)/i)[1].toLowerCase();
    }
    function getSpecialTransitionEndEvent() {
        return {
            bindType: TRANSITION_END,
            delegateType: TRANSITION_END,
            handle: function (event) {
                if (jquery_1["default"](event.target).is(this)) {
                    return event.handleObj.handler.apply(this, arguments); // eslint-disable-line prefer-rest-params
                }
                return undefined;
            }
        };
    }
    function transitionEndEmulator(duration) {
        var _this = this;
        var called = false;
        jquery_1["default"](this).one(Util.TRANSITION_END, function () {
            called = true;
        });
        setTimeout(function () {
            if (!called) {
                Util.triggerTransitionEnd(_this);
            }
        }, duration);
        return this;
    }
    function setTransitionEndSupport() {
        jquery_1["default"].fn.emulateTransitionEnd = transitionEndEmulator;
        jquery_1["default"].event.special[Util.TRANSITION_END] = getSpecialTransitionEndEvent();
    }
    var jquery_1, TRANSITION_END, MAX_UID, MILLISECONDS_MULTIPLIER, Util;
    return {
        setters: [
            function (jquery_1_1) {
                jquery_1 = jquery_1_1;
            }
        ],
        execute: function () {/**
             * --------------------------------------------------------------------------
             * Bootstrap (v4.6.1): util.js
             * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
             * --------------------------------------------------------------------------
             */
            /**
             * Private TransitionEnd Helpers
             */
            TRANSITION_END = 'transitionend';
            MAX_UID = 1000000;
            MILLISECONDS_MULTIPLIER = 1000;
            /**
             * Public Util API
             */
            Util = {
                TRANSITION_END: 'bsTransitionEnd',
                getUID: function (prefix) {
                    do {
                        // eslint-disable-next-line no-bitwise
                        prefix += ~~(Math.random() * MAX_UID); // "~~" acts like a faster Math.floor() here
                    } while (document.getElementById(prefix));
                    return prefix;
                },
                getSelectorFromElement: function (element) {
                    var selector = element.getAttribute('data-target');
                    if (!selector || selector === '#') {
                        var hrefAttr = element.getAttribute('href');
                        selector = hrefAttr && hrefAttr !== '#' ? hrefAttr.trim() : '';
                    }
                    try {
                        return document.querySelector(selector) ? selector : null;
                    }
                    catch (_) {
                        return null;
                    }
                },
                getTransitionDurationFromElement: function (element) {
                    if (!element) {
                        return 0;
                    }
                    // Get transition-duration of the element
                    var transitionDuration = jquery_1["default"](element).css('transition-duration');
                    var transitionDelay = jquery_1["default"](element).css('transition-delay');
                    var floatTransitionDuration = parseFloat(transitionDuration);
                    var floatTransitionDelay = parseFloat(transitionDelay);
                    // Return 0 if element or transition duration is not found
                    if (!floatTransitionDuration && !floatTransitionDelay) {
                        return 0;
                    }
                    // If multiple durations are defined, take the first
                    transitionDuration = transitionDuration.split(',')[0];
                    transitionDelay = transitionDelay.split(',')[0];
                    return (parseFloat(transitionDuration) + parseFloat(transitionDelay)) * MILLISECONDS_MULTIPLIER;
                },
                reflow: function (element) {
                    return element.offsetHeight;
                },
                triggerTransitionEnd: function (element) {
                    jquery_1["default"](element).trigger(TRANSITION_END);
                },
                supportsTransitionEnd: function () {
                    return Boolean(TRANSITION_END);
                },
                isElement: function (obj) {
                    return (obj[0] || obj).nodeType;
                },
                typeCheckConfig: function (componentName, config, configTypes) {
                    for (var property in configTypes) {
                        if (Object.prototype.hasOwnProperty.call(configTypes, property)) {
                            var expectedTypes = configTypes[property];
                            var value = config[property];
                            var valueType = value && Util.isElement(value) ?
                                'element' : toType(value);
                            if (!new RegExp(expectedTypes).test(valueType)) {
                                throw new Error(componentName.toUpperCase() + ": " +
                                    ("Option \"" + property + "\" provided type \"" + valueType + "\" ") +
                                    ("but expected type \"" + expectedTypes + "\"."));
                            }
                        }
                    }
                },
                findShadowRoot: function (element) {
                    if (!document.documentElement.attachShadow) {
                        return null;
                    }
                    // Can find the shadow root otherwise it'll return the document
                    if (typeof element.getRootNode === 'function') {
                        var root = element.getRootNode();
                        return root instanceof ShadowRoot ? root : null;
                    }
                    if (element instanceof ShadowRoot) {
                        return element;
                    }
                    // when we don't find a shadow root
                    if (!element.parentNode) {
                        return null;
                    }
                    return Util.findShadowRoot(element.parentNode);
                },
                jQueryDetection: function () {
                    if (typeof jquery_1["default"] === 'undefined') {
                        throw new TypeError('Bootstrap\'s JavaScript requires jQuery. jQuery must be included before Bootstrap\'s JavaScript.');
                    }
                    var version = jquery_1["default"].fn.jquery.split(' ')[0].split('.');
                    var minMajor = 1;
                    var ltMajor = 2;
                    var minMinor = 9;
                    var minPatch = 1;
                    var maxMajor = 4;
                    if (version[0] < ltMajor && version[1] < minMinor || version[0] === minMajor && version[1] === minMinor && version[2] < minPatch || version[0] >= maxMajor) {
                        throw new Error('Bootstrap\'s JavaScript requires at least jQuery v1.9.1 but less than v4.0.0');
                    }
                }
            };
            Util.jQueryDetection();
            setTransitionEndSupport();
            exports_1("default", Util);
        }
    };
});
/**
 * --------------------------------------------------------------------------
 * Bootstrap (v4.6.1): alert.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */
System.register("alert", ["jquery", "util"], function (exports_2, context_2) {
    "use strict";
    var __moduleName = context_2 && context_2.id;
    var jquery_2, util_1, NAME, VERSION, DATA_KEY, EVENT_KEY, DATA_API_KEY, JQUERY_NO_CONFLICT, CLASS_NAME_ALERT, CLASS_NAME_FADE, CLASS_NAME_SHOW, EVENT_CLOSE, EVENT_CLOSED, EVENT_CLICK_DATA_API, SELECTOR_DISMISS, Alert;
    return {
        setters: [
            function (jquery_2_1) {
                jquery_2 = jquery_2_1;
            },
            function (util_1_1) {
                util_1 = util_1_1;
            }
        ],
        execute: function () {/**
             * --------------------------------------------------------------------------
             * Bootstrap (v4.6.1): alert.js
             * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
             * --------------------------------------------------------------------------
             */
            /**
             * Constants
             */
            NAME = 'alert';
            VERSION = '4.6.1';
            DATA_KEY = 'bs.alert';
            EVENT_KEY = "." + DATA_KEY;
            DATA_API_KEY = '.data-api';
            JQUERY_NO_CONFLICT = jquery_2["default"].fn[NAME];
            CLASS_NAME_ALERT = 'alert';
            CLASS_NAME_FADE = 'fade';
            CLASS_NAME_SHOW = 'show';
            EVENT_CLOSE = "close" + EVENT_KEY;
            EVENT_CLOSED = "closed" + EVENT_KEY;
            EVENT_CLICK_DATA_API = "click" + EVENT_KEY + DATA_API_KEY;
            SELECTOR_DISMISS = '[data-dismiss="alert"]';
            /**
             * Class definition
             */
            Alert = (function () {
                function Alert(element) {
                    this._element = element;
                }
                Object.defineProperty(Alert, "VERSION", {
                    // Getters
                    get: function () {
                        return VERSION;
                    },
                    enumerable: true,
                    configurable: true
                });
                // Public
                Alert.prototype.close = function (element) {
                    var rootElement = this._element;
                    if (element) {
                        rootElement = this._getRootElement(element);
                    }
                    var customEvent = this._triggerCloseEvent(rootElement);
                    if (customEvent.isDefaultPrevented()) {
                        return;
                    }
                    this._removeElement(rootElement);
                };
                Alert.prototype.dispose = function () {
                    jquery_2["default"].removeData(this._element, DATA_KEY);
                    this._element = null;
                };
                // Private
                Alert.prototype._getRootElement = function (element) {
                    var selector = util_1["default"].getSelectorFromElement(element);
                    var parent = false;
                    if (selector) {
                        parent = document.querySelector(selector);
                    }
                    if (!parent) {
                        parent = jquery_2["default"](element).closest("." + CLASS_NAME_ALERT)[0];
                    }
                    return parent;
                };
                Alert.prototype._triggerCloseEvent = function (element) {
                    var closeEvent = jquery_2["default"].Event(EVENT_CLOSE);
                    jquery_2["default"](element).trigger(closeEvent);
                    return closeEvent;
                };
                Alert.prototype._removeElement = function (element) {
                    var _this = this;
                    jquery_2["default"](element).removeClass(CLASS_NAME_SHOW);
                    if (!jquery_2["default"](element).hasClass(CLASS_NAME_FADE)) {
                        this._destroyElement(element);
                        return;
                    }
                    var transitionDuration = util_1["default"].getTransitionDurationFromElement(element);
                    jquery_2["default"](element)
                        .one(util_1["default"].TRANSITION_END, function (event) { return _this._destroyElement(element, event); })
                        .emulateTransitionEnd(transitionDuration);
                };
                Alert.prototype._destroyElement = function (element) {
                    jquery_2["default"](element)
                        .detach()
                        .trigger(EVENT_CLOSED)
                        .remove();
                };
                // Static
                Alert._jQueryInterface = function (config) {
                    return this.each(function () {
                        var $element = jquery_2["default"](this);
                        var data = $element.data(DATA_KEY);
                        if (!data) {
                            data = new Alert(this);
                            $element.data(DATA_KEY, data);
                        }
                        if (config === 'close') {
                            data[config](this);
                        }
                    });
                };
                Alert._handleDismiss = function (alertInstance) {
                    return function (event) {
                        if (event) {
                            event.preventDefault();
                        }
                        alertInstance.close(this);
                    };
                };
                return Alert;
            }());
            /**
             * Data API implementation
             */
            jquery_2["default"](document).on(EVENT_CLICK_DATA_API, SELECTOR_DISMISS, Alert._handleDismiss(new Alert()));
            /**
             * jQuery
             */
            jquery_2["default"].fn[NAME] = Alert._jQueryInterface;
            jquery_2["default"].fn[NAME].Constructor = Alert;
            jquery_2["default"].fn[NAME].noConflict = function () {
                jquery_2["default"].fn[NAME] = JQUERY_NO_CONFLICT;
                return Alert._jQueryInterface;
            };
            exports_2("default", Alert);
        }
    };
});
/**
 * --------------------------------------------------------------------------
 * Bootstrap (v4.6.1): button.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */
System.register("button", ["jquery"], function (exports_3, context_3) {
    "use strict";
    var __moduleName = context_3 && context_3.id;
    var jquery_3, NAME, VERSION, DATA_KEY, EVENT_KEY, DATA_API_KEY, JQUERY_NO_CONFLICT, CLASS_NAME_ACTIVE, CLASS_NAME_BUTTON, CLASS_NAME_FOCUS, EVENT_CLICK_DATA_API, EVENT_FOCUS_BLUR_DATA_API, EVENT_LOAD_DATA_API, SELECTOR_DATA_TOGGLE_CARROT, SELECTOR_DATA_TOGGLES, SELECTOR_DATA_TOGGLE, SELECTOR_DATA_TOGGLES_BUTTONS, SELECTOR_INPUT, SELECTOR_ACTIVE, SELECTOR_BUTTON, Button;
    return {
        setters: [
            function (jquery_3_1) {
                jquery_3 = jquery_3_1;
            }
        ],
        execute: function () {/**
             * --------------------------------------------------------------------------
             * Bootstrap (v4.6.1): button.js
             * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
             * --------------------------------------------------------------------------
             */
            /**
             * Constants
             */
            NAME = 'button';
            VERSION = '4.6.1';
            DATA_KEY = 'bs.button';
            EVENT_KEY = "." + DATA_KEY;
            DATA_API_KEY = '.data-api';
            JQUERY_NO_CONFLICT = jquery_3["default"].fn[NAME];
            CLASS_NAME_ACTIVE = 'active';
            CLASS_NAME_BUTTON = 'btn';
            CLASS_NAME_FOCUS = 'focus';
            EVENT_CLICK_DATA_API = "click" + EVENT_KEY + DATA_API_KEY;
            EVENT_FOCUS_BLUR_DATA_API = "focus" + EVENT_KEY + DATA_API_KEY + " " +
                ("blur" + EVENT_KEY + DATA_API_KEY);
            EVENT_LOAD_DATA_API = "load" + EVENT_KEY + DATA_API_KEY;
            SELECTOR_DATA_TOGGLE_CARROT = '[data-toggle^="button"]';
            SELECTOR_DATA_TOGGLES = '[data-toggle="buttons"]';
            SELECTOR_DATA_TOGGLE = '[data-toggle="button"]';
            SELECTOR_DATA_TOGGLES_BUTTONS = '[data-toggle="buttons"] .btn';
            SELECTOR_INPUT = 'input:not([type="hidden"])';
            SELECTOR_ACTIVE = '.active';
            SELECTOR_BUTTON = '.btn';
            /**
             * Class definition
             */
            Button = (function () {
                function Button(element) {
                    this._element = element;
                    this.shouldAvoidTriggerChange = false;
                }
                Object.defineProperty(Button, "VERSION", {
                    // Getters
                    get: function () {
                        return VERSION;
                    },
                    enumerable: true,
                    configurable: true
                });
                // Public
                Button.prototype.toggle = function () {
                    var triggerChangeEvent = true;
                    var addAriaPressed = true;
                    var rootElement = jquery_3["default"](this._element).closest(SELECTOR_DATA_TOGGLES)[0];
                    if (rootElement) {
                        var input = this._element.querySelector(SELECTOR_INPUT);
                        if (input) {
                            if (input.type === 'radio') {
                                if (input.checked && this._element.classList.contains(CLASS_NAME_ACTIVE)) {
                                    triggerChangeEvent = false;
                                }
                                else {
                                    var activeElement = rootElement.querySelector(SELECTOR_ACTIVE);
                                    if (activeElement) {
                                        jquery_3["default"](activeElement).removeClass(CLASS_NAME_ACTIVE);
                                    }
                                }
                            }
                            if (triggerChangeEvent) {
                                // if it's not a radio button or checkbox don't add a pointless/invalid checked property to the input
                                if (input.type === 'checkbox' || input.type === 'radio') {
                                    input.checked = !this._element.classList.contains(CLASS_NAME_ACTIVE);
                                }
                                if (!this.shouldAvoidTriggerChange) {
                                    jquery_3["default"](input).trigger('change');
                                }
                            }
                            input.focus();
                            addAriaPressed = false;
                        }
                    }
                    if (!(this._element.hasAttribute('disabled') || this._element.classList.contains('disabled'))) {
                        if (addAriaPressed) {
                            this._element.setAttribute('aria-pressed', !this._element.classList.contains(CLASS_NAME_ACTIVE));
                        }
                        if (triggerChangeEvent) {
                            jquery_3["default"](this._element).toggleClass(CLASS_NAME_ACTIVE);
                        }
                    }
                };
                Button.prototype.dispose = function () {
                    jquery_3["default"].removeData(this._element, DATA_KEY);
                    this._element = null;
                };
                // Static
                Button._jQueryInterface = function (config, avoidTriggerChange) {
                    return this.each(function () {
                        var $element = jquery_3["default"](this);
                        var data = $element.data(DATA_KEY);
                        if (!data) {
                            data = new Button(this);
                            $element.data(DATA_KEY, data);
                        }
                        data.shouldAvoidTriggerChange = avoidTriggerChange;
                        if (config === 'toggle') {
                            data[config]();
                        }
                    });
                };
                return Button;
            }());
            /**
             * Data API implementation
             */
            jquery_3["default"](document)
                .on(EVENT_CLICK_DATA_API, SELECTOR_DATA_TOGGLE_CARROT, function (event) {
                var button = event.target;
                var initialButton = button;
                if (!jquery_3["default"](button).hasClass(CLASS_NAME_BUTTON)) {
                    button = jquery_3["default"](button).closest(SELECTOR_BUTTON)[0];
                }
                if (!button || button.hasAttribute('disabled') || button.classList.contains('disabled')) {
                    event.preventDefault(); // work around Firefox bug #1540995
                }
                else {
                    var inputBtn = button.querySelector(SELECTOR_INPUT);
                    if (inputBtn && (inputBtn.hasAttribute('disabled') || inputBtn.classList.contains('disabled'))) {
                        event.preventDefault(); // work around Firefox bug #1540995
                        return;
                    }
                    if (initialButton.tagName === 'INPUT' || button.tagName !== 'LABEL') {
                        Button._jQueryInterface.call(jquery_3["default"](button), 'toggle', initialButton.tagName === 'INPUT');
                    }
                }
            })
                .on(EVENT_FOCUS_BLUR_DATA_API, SELECTOR_DATA_TOGGLE_CARROT, function (event) {
                var button = jquery_3["default"](event.target).closest(SELECTOR_BUTTON)[0];
                jquery_3["default"](button).toggleClass(CLASS_NAME_FOCUS, /^focus(in)?$/.test(event.type));
            });
            jquery_3["default"](window).on(EVENT_LOAD_DATA_API, function () {
                // ensure correct active class is set to match the controls' actual values/states
                // find all checkboxes/readio buttons inside data-toggle groups
                var buttons = [].slice.call(document.querySelectorAll(SELECTOR_DATA_TOGGLES_BUTTONS));
                for (var i = 0, len = buttons.length; i < len; i++) {
                    var button = buttons[i];
                    var input = button.querySelector(SELECTOR_INPUT);
                    if (input.checked || input.hasAttribute('checked')) {
                        button.classList.add(CLASS_NAME_ACTIVE);
                    }
                    else {
                        button.classList.remove(CLASS_NAME_ACTIVE);
                    }
                }
                // find all button toggles
                buttons = [].slice.call(document.querySelectorAll(SELECTOR_DATA_TOGGLE));
                for (var i = 0, len = buttons.length; i < len; i++) {
                    var button = buttons[i];
                    if (button.getAttribute('aria-pressed') === 'true') {
                        button.classList.add(CLASS_NAME_ACTIVE);
                    }
                    else {
                        button.classList.remove(CLASS_NAME_ACTIVE);
                    }
                }
            });
            /**
             * jQuery
             */
            jquery_3["default"].fn[NAME] = Button._jQueryInterface;
            jquery_3["default"].fn[NAME].Constructor = Button;
            jquery_3["default"].fn[NAME].noConflict = function () {
                jquery_3["default"].fn[NAME] = JQUERY_NO_CONFLICT;
                return Button._jQueryInterface;
            };
            exports_3("default", Button);
        }
    };
});
/**
 * --------------------------------------------------------------------------
 * Bootstrap (v4.6.1): carousel.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */
System.register("carousel", ["jquery", "util"], function (exports_4, context_4) {
    "use strict";
    var __moduleName = context_4 && context_4.id;
    var jquery_4, util_2, NAME, VERSION, DATA_KEY, EVENT_KEY, DATA_API_KEY, JQUERY_NO_CONFLICT, ARROW_LEFT_KEYCODE, ARROW_RIGHT_KEYCODE, TOUCHEVENT_COMPAT_WAIT, SWIPE_THRESHOLD, CLASS_NAME_CAROUSEL, CLASS_NAME_ACTIVE, CLASS_NAME_SLIDE, CLASS_NAME_RIGHT, CLASS_NAME_LEFT, CLASS_NAME_NEXT, CLASS_NAME_PREV, CLASS_NAME_POINTER_EVENT, DIRECTION_NEXT, DIRECTION_PREV, DIRECTION_LEFT, DIRECTION_RIGHT, EVENT_SLIDE, EVENT_SLID, EVENT_KEYDOWN, EVENT_MOUSEENTER, EVENT_MOUSELEAVE, EVENT_TOUCHSTART, EVENT_TOUCHMOVE, EVENT_TOUCHEND, EVENT_POINTERDOWN, EVENT_POINTERUP, EVENT_DRAG_START, EVENT_LOAD_DATA_API, EVENT_CLICK_DATA_API, SELECTOR_ACTIVE, SELECTOR_ACTIVE_ITEM, SELECTOR_ITEM, SELECTOR_ITEM_IMG, SELECTOR_NEXT_PREV, SELECTOR_INDICATORS, SELECTOR_DATA_SLIDE, SELECTOR_DATA_RIDE, Default, DefaultType, PointerType, Carousel;
    return {
        setters: [
            function (jquery_4_1) {
                jquery_4 = jquery_4_1;
            },
            function (util_2_1) {
                util_2 = util_2_1;
            }
        ],
        execute: function () {/**
             * --------------------------------------------------------------------------
             * Bootstrap (v4.6.1): carousel.js
             * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
             * --------------------------------------------------------------------------
             */
            /**
             * Constants
             */
            NAME = 'carousel';
            VERSION = '4.6.1';
            DATA_KEY = 'bs.carousel';
            EVENT_KEY = "." + DATA_KEY;
            DATA_API_KEY = '.data-api';
            JQUERY_NO_CONFLICT = jquery_4["default"].fn[NAME];
            ARROW_LEFT_KEYCODE = 37; // KeyboardEvent.which value for left arrow key
            ARROW_RIGHT_KEYCODE = 39; // KeyboardEvent.which value for right arrow key
            TOUCHEVENT_COMPAT_WAIT = 500; // Time for mouse compat events to fire after touch
            SWIPE_THRESHOLD = 40;
            CLASS_NAME_CAROUSEL = 'carousel';
            CLASS_NAME_ACTIVE = 'active';
            CLASS_NAME_SLIDE = 'slide';
            CLASS_NAME_RIGHT = 'carousel-item-right';
            CLASS_NAME_LEFT = 'carousel-item-left';
            CLASS_NAME_NEXT = 'carousel-item-next';
            CLASS_NAME_PREV = 'carousel-item-prev';
            CLASS_NAME_POINTER_EVENT = 'pointer-event';
            DIRECTION_NEXT = 'next';
            DIRECTION_PREV = 'prev';
            DIRECTION_LEFT = 'left';
            DIRECTION_RIGHT = 'right';
            EVENT_SLIDE = "slide" + EVENT_KEY;
            EVENT_SLID = "slid" + EVENT_KEY;
            EVENT_KEYDOWN = "keydown" + EVENT_KEY;
            EVENT_MOUSEENTER = "mouseenter" + EVENT_KEY;
            EVENT_MOUSELEAVE = "mouseleave" + EVENT_KEY;
            EVENT_TOUCHSTART = "touchstart" + EVENT_KEY;
            EVENT_TOUCHMOVE = "touchmove" + EVENT_KEY;
            EVENT_TOUCHEND = "touchend" + EVENT_KEY;
            EVENT_POINTERDOWN = "pointerdown" + EVENT_KEY;
            EVENT_POINTERUP = "pointerup" + EVENT_KEY;
            EVENT_DRAG_START = "dragstart" + EVENT_KEY;
            EVENT_LOAD_DATA_API = "load" + EVENT_KEY + DATA_API_KEY;
            EVENT_CLICK_DATA_API = "click" + EVENT_KEY + DATA_API_KEY;
            SELECTOR_ACTIVE = '.active';
            SELECTOR_ACTIVE_ITEM = '.active.carousel-item';
            SELECTOR_ITEM = '.carousel-item';
            SELECTOR_ITEM_IMG = '.carousel-item img';
            SELECTOR_NEXT_PREV = '.carousel-item-next, .carousel-item-prev';
            SELECTOR_INDICATORS = '.carousel-indicators';
            SELECTOR_DATA_SLIDE = '[data-slide], [data-slide-to]';
            SELECTOR_DATA_RIDE = '[data-ride="carousel"]';
            Default = {
                interval: 5000,
                keyboard: true,
                slide: false,
                pause: 'hover',
                wrap: true,
                touch: true
            };
            DefaultType = {
                interval: '(number|boolean)',
                keyboard: 'boolean',
                slide: '(boolean|string)',
                pause: '(string|boolean)',
                wrap: 'boolean',
                touch: 'boolean'
            };
            PointerType = {
                TOUCH: 'touch',
                PEN: 'pen'
            };
            /**
             * Class definition
             */
            Carousel = (function () {
                function Carousel(element, config) {
                    this._items = null;
                    this._interval = null;
                    this._activeElement = null;
                    this._isPaused = false;
                    this._isSliding = false;
                    this.touchTimeout = null;
                    this.touchStartX = 0;
                    this.touchDeltaX = 0;
                    this._config = this._getConfig(config);
                    this._element = element;
                    this._indicatorsElement = this._element.querySelector(SELECTOR_INDICATORS);
                    this._touchSupported = 'ontouchstart' in document.documentElement || navigator.maxTouchPoints > 0;
                    this._pointerEvent = Boolean(window.PointerEvent || window.MSPointerEvent);
                    this._addEventListeners();
                }
                Object.defineProperty(Carousel, "VERSION", {
                    // Getters
                    get: function () {
                        return VERSION;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Carousel, "Default", {
                    get: function () {
                        return Default;
                    },
                    enumerable: true,
                    configurable: true
                });
                // Public
                Carousel.prototype.next = function () {
                    if (!this._isSliding) {
                        this._slide(DIRECTION_NEXT);
                    }
                };
                Carousel.prototype.nextWhenVisible = function () {
                    var $element = jquery_4["default"](this._element);
                    // Don't call next when the page isn't visible
                    // or the carousel or its parent isn't visible
                    if (!document.hidden &&
                        ($element.is(':visible') && $element.css('visibility') !== 'hidden')) {
                        this.next();
                    }
                };
                Carousel.prototype.prev = function () {
                    if (!this._isSliding) {
                        this._slide(DIRECTION_PREV);
                    }
                };
                Carousel.prototype.pause = function (event) {
                    if (!event) {
                        this._isPaused = true;
                    }
                    if (this._element.querySelector(SELECTOR_NEXT_PREV)) {
                        util_2["default"].triggerTransitionEnd(this._element);
                        this.cycle(true);
                    }
                    clearInterval(this._interval);
                    this._interval = null;
                };
                Carousel.prototype.cycle = function (event) {
                    if (!event) {
                        this._isPaused = false;
                    }
                    if (this._interval) {
                        clearInterval(this._interval);
                        this._interval = null;
                    }
                    if (this._config.interval && !this._isPaused) {
                        this._updateInterval();
                        this._interval = setInterval((document.visibilityState ? this.nextWhenVisible : this.next).bind(this), this._config.interval);
                    }
                };
                Carousel.prototype.to = function (index) {
                    var _this = this;
                    this._activeElement = this._element.querySelector(SELECTOR_ACTIVE_ITEM);
                    var activeIndex = this._getItemIndex(this._activeElement);
                    if (index > this._items.length - 1 || index < 0) {
                        return;
                    }
                    if (this._isSliding) {
                        jquery_4["default"](this._element).one(EVENT_SLID, function () { return _this.to(index); });
                        return;
                    }
                    if (activeIndex === index) {
                        this.pause();
                        this.cycle();
                        return;
                    }
                    var direction = index > activeIndex ?
                        DIRECTION_NEXT :
                        DIRECTION_PREV;
                    this._slide(direction, this._items[index]);
                };
                Carousel.prototype.dispose = function () {
                    jquery_4["default"](this._element).off(EVENT_KEY);
                    jquery_4["default"].removeData(this._element, DATA_KEY);
                    this._items = null;
                    this._config = null;
                    this._element = null;
                    this._interval = null;
                    this._isPaused = null;
                    this._isSliding = null;
                    this._activeElement = null;
                    this._indicatorsElement = null;
                };
                // Private
                Carousel.prototype._getConfig = function (config) {
                    config = __assign({}, Default, config);
                    util_2["default"].typeCheckConfig(NAME, config, DefaultType);
                    return config;
                };
                Carousel.prototype._handleSwipe = function () {
                    var absDeltax = Math.abs(this.touchDeltaX);
                    if (absDeltax <= SWIPE_THRESHOLD) {
                        return;
                    }
                    var direction = absDeltax / this.touchDeltaX;
                    this.touchDeltaX = 0;
                    // swipe left
                    if (direction > 0) {
                        this.prev();
                    }
                    // swipe right
                    if (direction < 0) {
                        this.next();
                    }
                };
                Carousel.prototype._addEventListeners = function () {
                    var _this = this;
                    if (this._config.keyboard) {
                        jquery_4["default"](this._element).on(EVENT_KEYDOWN, function (event) { return _this._keydown(event); });
                    }
                    if (this._config.pause === 'hover') {
                        jquery_4["default"](this._element)
                            .on(EVENT_MOUSEENTER, function (event) { return _this.pause(event); })
                            .on(EVENT_MOUSELEAVE, function (event) { return _this.cycle(event); });
                    }
                    if (this._config.touch) {
                        this._addTouchEventListeners();
                    }
                };
                Carousel.prototype._addTouchEventListeners = function () {
                    var _this = this;
                    if (!this._touchSupported) {
                        return;
                    }
                    var start = function (event) {
                        if (_this._pointerEvent && PointerType[event.originalEvent.pointerType.toUpperCase()]) {
                            _this.touchStartX = event.originalEvent.clientX;
                        }
                        else if (!_this._pointerEvent) {
                            _this.touchStartX = event.originalEvent.touches[0].clientX;
                        }
                    };
                    var move = function (event) {
                        // ensure swiping with one touch and not pinching
                        _this.touchDeltaX = event.originalEvent.touches && event.originalEvent.touches.length > 1 ?
                            0 :
                            event.originalEvent.touches[0].clientX - _this.touchStartX;
                    };
                    var end = function (event) {
                        if (_this._pointerEvent && PointerType[event.originalEvent.pointerType.toUpperCase()]) {
                            _this.touchDeltaX = event.originalEvent.clientX - _this.touchStartX;
                        }
                        _this._handleSwipe();
                        if (_this._config.pause === 'hover') {
                            // If it's a touch-enabled device, mouseenter/leave are fired as
                            // part of the mouse compatibility events on first tap - the carousel
                            // would stop cycling until user tapped out of it;
                            // here, we listen for touchend, explicitly pause the carousel
                            // (as if it's the second time we tap on it, mouseenter compat event
                            // is NOT fired) and after a timeout (to allow for mouse compatibility
                            // events to fire) we explicitly restart cycling
                            _this.pause();
                            if (_this.touchTimeout) {
                                clearTimeout(_this.touchTimeout);
                            }
                            _this.touchTimeout = setTimeout(function (event) { return _this.cycle(event); }, TOUCHEVENT_COMPAT_WAIT + _this._config.interval);
                        }
                    };
                    jquery_4["default"](this._element.querySelectorAll(SELECTOR_ITEM_IMG))
                        .on(EVENT_DRAG_START, function (e) { return e.preventDefault(); });
                    if (this._pointerEvent) {
                        jquery_4["default"](this._element).on(EVENT_POINTERDOWN, function (event) { return start(event); });
                        jquery_4["default"](this._element).on(EVENT_POINTERUP, function (event) { return end(event); });
                        this._element.classList.add(CLASS_NAME_POINTER_EVENT);
                    }
                    else {
                        jquery_4["default"](this._element).on(EVENT_TOUCHSTART, function (event) { return start(event); });
                        jquery_4["default"](this._element).on(EVENT_TOUCHMOVE, function (event) { return move(event); });
                        jquery_4["default"](this._element).on(EVENT_TOUCHEND, function (event) { return end(event); });
                    }
                };
                Carousel.prototype._keydown = function (event) {
                    if (/input|textarea/i.test(event.target.tagName)) {
                        return;
                    }
                    switch (event.which) {
                        case ARROW_LEFT_KEYCODE:
                            event.preventDefault();
                            this.prev();
                            break;
                        case ARROW_RIGHT_KEYCODE:
                            event.preventDefault();
                            this.next();
                            break;
                        default:
                    }
                };
                Carousel.prototype._getItemIndex = function (element) {
                    this._items = element && element.parentNode ?
                        [].slice.call(element.parentNode.querySelectorAll(SELECTOR_ITEM)) :
                        [];
                    return this._items.indexOf(element);
                };
                Carousel.prototype._getItemByDirection = function (direction, activeElement) {
                    var isNextDirection = direction === DIRECTION_NEXT;
                    var isPrevDirection = direction === DIRECTION_PREV;
                    var activeIndex = this._getItemIndex(activeElement);
                    var lastItemIndex = this._items.length - 1;
                    var isGoingToWrap = isPrevDirection && activeIndex === 0 ||
                        isNextDirection && activeIndex === lastItemIndex;
                    if (isGoingToWrap && !this._config.wrap) {
                        return activeElement;
                    }
                    var delta = direction === DIRECTION_PREV ? -1 : 1;
                    var itemIndex = (activeIndex + delta) % this._items.length;
                    return itemIndex === -1 ?
                        this._items[this._items.length - 1] : this._items[itemIndex];
                };
                Carousel.prototype._triggerSlideEvent = function (relatedTarget, eventDirectionName) {
                    var targetIndex = this._getItemIndex(relatedTarget);
                    var fromIndex = this._getItemIndex(this._element.querySelector(SELECTOR_ACTIVE_ITEM));
                    var slideEvent = jquery_4["default"].Event(EVENT_SLIDE, {
                        relatedTarget: relatedTarget,
                        direction: eventDirectionName,
                        from: fromIndex,
                        to: targetIndex
                    });
                    jquery_4["default"](this._element).trigger(slideEvent);
                    return slideEvent;
                };
                Carousel.prototype._setActiveIndicatorElement = function (element) {
                    if (this._indicatorsElement) {
                        var indicators = [].slice.call(this._indicatorsElement.querySelectorAll(SELECTOR_ACTIVE));
                        jquery_4["default"](indicators).removeClass(CLASS_NAME_ACTIVE);
                        var nextIndicator = this._indicatorsElement.children[this._getItemIndex(element)];
                        if (nextIndicator) {
                            jquery_4["default"](nextIndicator).addClass(CLASS_NAME_ACTIVE);
                        }
                    }
                };
                Carousel.prototype._updateInterval = function () {
                    var element = this._activeElement || this._element.querySelector(SELECTOR_ACTIVE_ITEM);
                    if (!element) {
                        return;
                    }
                    var elementInterval = parseInt(element.getAttribute('data-interval'), 10);
                    if (elementInterval) {
                        this._config.defaultInterval = this._config.defaultInterval || this._config.interval;
                        this._config.interval = elementInterval;
                    }
                    else {
                        this._config.interval = this._config.defaultInterval || this._config.interval;
                    }
                };
                Carousel.prototype._slide = function (direction, element) {
                    var _this = this;
                    var activeElement = this._element.querySelector(SELECTOR_ACTIVE_ITEM);
                    var activeElementIndex = this._getItemIndex(activeElement);
                    var nextElement = element || activeElement &&
                        this._getItemByDirection(direction, activeElement);
                    var nextElementIndex = this._getItemIndex(nextElement);
                    var isCycling = Boolean(this._interval);
                    var directionalClassName;
                    var orderClassName;
                    var eventDirectionName;
                    if (direction === DIRECTION_NEXT) {
                        directionalClassName = CLASS_NAME_LEFT;
                        orderClassName = CLASS_NAME_NEXT;
                        eventDirectionName = DIRECTION_LEFT;
                    }
                    else {
                        directionalClassName = CLASS_NAME_RIGHT;
                        orderClassName = CLASS_NAME_PREV;
                        eventDirectionName = DIRECTION_RIGHT;
                    }
                    if (nextElement && jquery_4["default"](nextElement).hasClass(CLASS_NAME_ACTIVE)) {
                        this._isSliding = false;
                        return;
                    }
                    var slideEvent = this._triggerSlideEvent(nextElement, eventDirectionName);
                    if (slideEvent.isDefaultPrevented()) {
                        return;
                    }
                    if (!activeElement || !nextElement) {
                        // Some weirdness is happening, so we bail
                        return;
                    }
                    this._isSliding = true;
                    if (isCycling) {
                        this.pause();
                    }
                    this._setActiveIndicatorElement(nextElement);
                    this._activeElement = nextElement;
                    var slidEvent = jquery_4["default"].Event(EVENT_SLID, {
                        relatedTarget: nextElement,
                        direction: eventDirectionName,
                        from: activeElementIndex,
                        to: nextElementIndex
                    });
                    if (jquery_4["default"](this._element).hasClass(CLASS_NAME_SLIDE)) {
                        jquery_4["default"](nextElement).addClass(orderClassName);
                        util_2["default"].reflow(nextElement);
                        jquery_4["default"](activeElement).addClass(directionalClassName);
                        jquery_4["default"](nextElement).addClass(directionalClassName);
                        var transitionDuration = util_2["default"].getTransitionDurationFromElement(activeElement);
                        jquery_4["default"](activeElement)
                            .one(util_2["default"].TRANSITION_END, function () {
                            jquery_4["default"](nextElement)
                                .removeClass(directionalClassName + " " + orderClassName)
                                .addClass(CLASS_NAME_ACTIVE);
                            jquery_4["default"](activeElement).removeClass(CLASS_NAME_ACTIVE + " " + orderClassName + " " + directionalClassName);
                            _this._isSliding = false;
                            setTimeout(function () { return jquery_4["default"](_this._element).trigger(slidEvent); }, 0);
                        })
                            .emulateTransitionEnd(transitionDuration);
                    }
                    else {
                        jquery_4["default"](activeElement).removeClass(CLASS_NAME_ACTIVE);
                        jquery_4["default"](nextElement).addClass(CLASS_NAME_ACTIVE);
                        this._isSliding = false;
                        jquery_4["default"](this._element).trigger(slidEvent);
                    }
                    if (isCycling) {
                        this.cycle();
                    }
                };
                // Static
                Carousel._jQueryInterface = function (config) {
                    return this.each(function () {
                        var data = jquery_4["default"](this).data(DATA_KEY);
                        var _config = __assign({}, Default, jquery_4["default"](this).data());
                        if (typeof config === 'object') {
                            _config = __assign({}, _config, config);
                        }
                        var action = typeof config === 'string' ? config : _config.slide;
                        if (!data) {
                            data = new Carousel(this, _config);
                            jquery_4["default"](this).data(DATA_KEY, data);
                        }
                        if (typeof config === 'number') {
                            data.to(config);
                        }
                        else if (typeof action === 'string') {
                            if (typeof data[action] === 'undefined') {
                                throw new TypeError("No method named \"" + action + "\"");
                            }
                            data[action]();
                        }
                        else if (_config.interval && _config.ride) {
                            data.pause();
                            data.cycle();
                        }
                    });
                };
                Carousel._dataApiClickHandler = function (event) {
                    var selector = util_2["default"].getSelectorFromElement(this);
                    if (!selector) {
                        return;
                    }
                    var target = jquery_4["default"](selector)[0];
                    if (!target || !jquery_4["default"](target).hasClass(CLASS_NAME_CAROUSEL)) {
                        return;
                    }
                    var config = __assign({}, jquery_4["default"](target).data(), jquery_4["default"](this).data());
                    var slideIndex = this.getAttribute('data-slide-to');
                    if (slideIndex) {
                        config.interval = false;
                    }
                    Carousel._jQueryInterface.call(jquery_4["default"](target), config);
                    if (slideIndex) {
                        jquery_4["default"](target).data(DATA_KEY).to(slideIndex);
                    }
                    event.preventDefault();
                };
                return Carousel;
            }());
            /**
             * Data API implementation
             */
            jquery_4["default"](document).on(EVENT_CLICK_DATA_API, SELECTOR_DATA_SLIDE, Carousel._dataApiClickHandler);
            jquery_4["default"](window).on(EVENT_LOAD_DATA_API, function () {
                var carousels = [].slice.call(document.querySelectorAll(SELECTOR_DATA_RIDE));
                for (var i = 0, len = carousels.length; i < len; i++) {
                    var $carousel = jquery_4["default"](carousels[i]);
                    Carousel._jQueryInterface.call($carousel, $carousel.data());
                }
            });
            /**
             * jQuery
             */
            jquery_4["default"].fn[NAME] = Carousel._jQueryInterface;
            jquery_4["default"].fn[NAME].Constructor = Carousel;
            jquery_4["default"].fn[NAME].noConflict = function () {
                jquery_4["default"].fn[NAME] = JQUERY_NO_CONFLICT;
                return Carousel._jQueryInterface;
            };
            exports_4("default", Carousel);
        }
    };
});
/**
 * --------------------------------------------------------------------------
 * Bootstrap (v4.6.1): collapse.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */
System.register("collapse", ["jquery", "util"], function (exports_5, context_5) {
    "use strict";
    var __moduleName = context_5 && context_5.id;
    var jquery_5, util_3, NAME, VERSION, DATA_KEY, EVENT_KEY, DATA_API_KEY, JQUERY_NO_CONFLICT, CLASS_NAME_SHOW, CLASS_NAME_COLLAPSE, CLASS_NAME_COLLAPSING, CLASS_NAME_COLLAPSED, DIMENSION_WIDTH, DIMENSION_HEIGHT, EVENT_SHOW, EVENT_SHOWN, EVENT_HIDE, EVENT_HIDDEN, EVENT_CLICK_DATA_API, SELECTOR_ACTIVES, SELECTOR_DATA_TOGGLE, Default, DefaultType, Collapse;
    return {
        setters: [
            function (jquery_5_1) {
                jquery_5 = jquery_5_1;
            },
            function (util_3_1) {
                util_3 = util_3_1;
            }
        ],
        execute: function () {/**
             * --------------------------------------------------------------------------
             * Bootstrap (v4.6.1): collapse.js
             * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
             * --------------------------------------------------------------------------
             */
            /**
             * Constants
             */
            NAME = 'collapse';
            VERSION = '4.6.1';
            DATA_KEY = 'bs.collapse';
            EVENT_KEY = "." + DATA_KEY;
            DATA_API_KEY = '.data-api';
            JQUERY_NO_CONFLICT = jquery_5["default"].fn[NAME];
            CLASS_NAME_SHOW = 'show';
            CLASS_NAME_COLLAPSE = 'collapse';
            CLASS_NAME_COLLAPSING = 'collapsing';
            CLASS_NAME_COLLAPSED = 'collapsed';
            DIMENSION_WIDTH = 'width';
            DIMENSION_HEIGHT = 'height';
            EVENT_SHOW = "show" + EVENT_KEY;
            EVENT_SHOWN = "shown" + EVENT_KEY;
            EVENT_HIDE = "hide" + EVENT_KEY;
            EVENT_HIDDEN = "hidden" + EVENT_KEY;
            EVENT_CLICK_DATA_API = "click" + EVENT_KEY + DATA_API_KEY;
            SELECTOR_ACTIVES = '.show, .collapsing';
            SELECTOR_DATA_TOGGLE = '[data-toggle="collapse"]';
            Default = {
                toggle: true,
                parent: ''
            };
            DefaultType = {
                toggle: 'boolean',
                parent: '(string|element)'
            };
            /**
             * Class definition
             */
            Collapse = (function () {
                function Collapse(element, config) {
                    this._isTransitioning = false;
                    this._element = element;
                    this._config = this._getConfig(config);
                    this._triggerArray = [].slice.call(document.querySelectorAll("[data-toggle=\"collapse\"][href=\"#" + element.id + "\"]," +
                        ("[data-toggle=\"collapse\"][data-target=\"#" + element.id + "\"]")));
                    var toggleList = [].slice.call(document.querySelectorAll(SELECTOR_DATA_TOGGLE));
                    for (var i = 0, len = toggleList.length; i < len; i++) {
                        var elem = toggleList[i];
                        var selector = util_3["default"].getSelectorFromElement(elem);
                        var filterElement = [].slice.call(document.querySelectorAll(selector))
                            .filter(function (foundElem) { return foundElem === element; });
                        if (selector !== null && filterElement.length > 0) {
                            this._selector = selector;
                            this._triggerArray.push(elem);
                        }
                    }
                    this._parent = this._config.parent ? this._getParent() : null;
                    if (!this._config.parent) {
                        this._addAriaAndCollapsedClass(this._element, this._triggerArray);
                    }
                    if (this._config.toggle) {
                        this.toggle();
                    }
                }
                Object.defineProperty(Collapse, "VERSION", {
                    // Getters
                    get: function () {
                        return VERSION;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Collapse, "Default", {
                    get: function () {
                        return Default;
                    },
                    enumerable: true,
                    configurable: true
                });
                // Public
                Collapse.prototype.toggle = function () {
                    if (jquery_5["default"](this._element).hasClass(CLASS_NAME_SHOW)) {
                        this.hide();
                    }
                    else {
                        this.show();
                    }
                };
                Collapse.prototype.show = function () {
                    var _this = this;
                    if (this._isTransitioning ||
                        jquery_5["default"](this._element).hasClass(CLASS_NAME_SHOW)) {
                        return;
                    }
                    var actives;
                    var activesData;
                    if (this._parent) {
                        actives = [].slice.call(this._parent.querySelectorAll(SELECTOR_ACTIVES))
                            .filter(function (elem) {
                            if (typeof _this._config.parent === 'string') {
                                return elem.getAttribute('data-parent') === _this._config.parent;
                            }
                            return elem.classList.contains(CLASS_NAME_COLLAPSE);
                        });
                        if (actives.length === 0) {
                            actives = null;
                        }
                    }
                    if (actives) {
                        activesData = jquery_5["default"](actives).not(this._selector).data(DATA_KEY);
                        if (activesData && activesData._isTransitioning) {
                            return;
                        }
                    }
                    var startEvent = jquery_5["default"].Event(EVENT_SHOW);
                    jquery_5["default"](this._element).trigger(startEvent);
                    if (startEvent.isDefaultPrevented()) {
                        return;
                    }
                    if (actives) {
                        Collapse._jQueryInterface.call(jquery_5["default"](actives).not(this._selector), 'hide');
                        if (!activesData) {
                            jquery_5["default"](actives).data(DATA_KEY, null);
                        }
                    }
                    var dimension = this._getDimension();
                    jquery_5["default"](this._element)
                        .removeClass(CLASS_NAME_COLLAPSE)
                        .addClass(CLASS_NAME_COLLAPSING);
                    this._element.style[dimension] = 0;
                    if (this._triggerArray.length) {
                        jquery_5["default"](this._triggerArray)
                            .removeClass(CLASS_NAME_COLLAPSED)
                            .attr('aria-expanded', true);
                    }
                    this.setTransitioning(true);
                    var complete = function () {
                        jquery_5["default"](_this._element)
                            .removeClass(CLASS_NAME_COLLAPSING)
                            .addClass(CLASS_NAME_COLLAPSE + " " + CLASS_NAME_SHOW);
                        _this._element.style[dimension] = '';
                        _this.setTransitioning(false);
                        jquery_5["default"](_this._element).trigger(EVENT_SHOWN);
                    };
                    var capitalizedDimension = dimension[0].toUpperCase() + dimension.slice(1);
                    var scrollSize = "scroll" + capitalizedDimension;
                    var transitionDuration = util_3["default"].getTransitionDurationFromElement(this._element);
                    jquery_5["default"](this._element)
                        .one(util_3["default"].TRANSITION_END, complete)
                        .emulateTransitionEnd(transitionDuration);
                    this._element.style[dimension] = this._element[scrollSize] + "px";
                };
                Collapse.prototype.hide = function () {
                    var _this = this;
                    if (this._isTransitioning ||
                        !jquery_5["default"](this._element).hasClass(CLASS_NAME_SHOW)) {
                        return;
                    }
                    var startEvent = jquery_5["default"].Event(EVENT_HIDE);
                    jquery_5["default"](this._element).trigger(startEvent);
                    if (startEvent.isDefaultPrevented()) {
                        return;
                    }
                    var dimension = this._getDimension();
                    this._element.style[dimension] = this._element.getBoundingClientRect()[dimension] + "px";
                    util_3["default"].reflow(this._element);
                    jquery_5["default"](this._element)
                        .addClass(CLASS_NAME_COLLAPSING)
                        .removeClass(CLASS_NAME_COLLAPSE + " " + CLASS_NAME_SHOW);
                    var triggerArrayLength = this._triggerArray.length;
                    if (triggerArrayLength > 0) {
                        for (var i = 0; i < triggerArrayLength; i++) {
                            var trigger = this._triggerArray[i];
                            var selector = util_3["default"].getSelectorFromElement(trigger);
                            if (selector !== null) {
                                var $elem = jquery_5["default"]([].slice.call(document.querySelectorAll(selector)));
                                if (!$elem.hasClass(CLASS_NAME_SHOW)) {
                                    jquery_5["default"](trigger).addClass(CLASS_NAME_COLLAPSED)
                                        .attr('aria-expanded', false);
                                }
                            }
                        }
                    }
                    this.setTransitioning(true);
                    var complete = function () {
                        _this.setTransitioning(false);
                        jquery_5["default"](_this._element)
                            .removeClass(CLASS_NAME_COLLAPSING)
                            .addClass(CLASS_NAME_COLLAPSE)
                            .trigger(EVENT_HIDDEN);
                    };
                    this._element.style[dimension] = '';
                    var transitionDuration = util_3["default"].getTransitionDurationFromElement(this._element);
                    jquery_5["default"](this._element)
                        .one(util_3["default"].TRANSITION_END, complete)
                        .emulateTransitionEnd(transitionDuration);
                };
                Collapse.prototype.setTransitioning = function (isTransitioning) {
                    this._isTransitioning = isTransitioning;
                };
                Collapse.prototype.dispose = function () {
                    jquery_5["default"].removeData(this._element, DATA_KEY);
                    this._config = null;
                    this._parent = null;
                    this._element = null;
                    this._triggerArray = null;
                    this._isTransitioning = null;
                };
                // Private
                Collapse.prototype._getConfig = function (config) {
                    config = __assign({}, Default, config);
                    config.toggle = Boolean(config.toggle); // Coerce string values
                    util_3["default"].typeCheckConfig(NAME, config, DefaultType);
                    return config;
                };
                Collapse.prototype._getDimension = function () {
                    var hasWidth = jquery_5["default"](this._element).hasClass(DIMENSION_WIDTH);
                    return hasWidth ? DIMENSION_WIDTH : DIMENSION_HEIGHT;
                };
                Collapse.prototype._getParent = function () {
                    var _this = this;
                    var parent;
                    if (util_3["default"].isElement(this._config.parent)) {
                        parent = this._config.parent;
                        // It's a jQuery object
                        if (typeof this._config.parent.jquery !== 'undefined') {
                            parent = this._config.parent[0];
                        }
                    }
                    else {
                        parent = document.querySelector(this._config.parent);
                    }
                    var selector = "[data-toggle=\"collapse\"][data-parent=\"" + this._config.parent + "\"]";
                    var children = [].slice.call(parent.querySelectorAll(selector));
                    jquery_5["default"](children).each(function (i, element) {
                        _this._addAriaAndCollapsedClass(Collapse._getTargetFromElement(element), [element]);
                    });
                    return parent;
                };
                Collapse.prototype._addAriaAndCollapsedClass = function (element, triggerArray) {
                    var isOpen = jquery_5["default"](element).hasClass(CLASS_NAME_SHOW);
                    if (triggerArray.length) {
                        jquery_5["default"](triggerArray)
                            .toggleClass(CLASS_NAME_COLLAPSED, !isOpen)
                            .attr('aria-expanded', isOpen);
                    }
                };
                // Static
                Collapse._getTargetFromElement = function (element) {
                    var selector = util_3["default"].getSelectorFromElement(element);
                    return selector ? document.querySelector(selector) : null;
                };
                Collapse._jQueryInterface = function (config) {
                    return this.each(function () {
                        var $element = jquery_5["default"](this);
                        var data = $element.data(DATA_KEY);
                        var _config = __assign({}, Default, $element.data(), (typeof config === 'object' && config ? config : {}));
                        if (!data && _config.toggle && typeof config === 'string' && /show|hide/.test(config)) {
                            _config.toggle = false;
                        }
                        if (!data) {
                            data = new Collapse(this, _config);
                            $element.data(DATA_KEY, data);
                        }
                        if (typeof config === 'string') {
                            if (typeof data[config] === 'undefined') {
                                throw new TypeError("No method named \"" + config + "\"");
                            }
                            data[config]();
                        }
                    });
                };
                return Collapse;
            }());
            /**
             * Data API implementation
             */
            jquery_5["default"](document).on(EVENT_CLICK_DATA_API, SELECTOR_DATA_TOGGLE, function (event) {
                // preventDefault only for <a> elements (which change the URL) not inside the collapsible element
                if (event.currentTarget.tagName === 'A') {
                    event.preventDefault();
                }
                var $trigger = jquery_5["default"](this);
                var selector = util_3["default"].getSelectorFromElement(this);
                var selectors = [].slice.call(document.querySelectorAll(selector));
                jquery_5["default"](selectors).each(function () {
                    var $target = jquery_5["default"](this);
                    var data = $target.data(DATA_KEY);
                    var config = data ? 'toggle' : $trigger.data();
                    Collapse._jQueryInterface.call($target, config);
                });
            });
            /**
             * jQuery
             */
            jquery_5["default"].fn[NAME] = Collapse._jQueryInterface;
            jquery_5["default"].fn[NAME].Constructor = Collapse;
            jquery_5["default"].fn[NAME].noConflict = function () {
                jquery_5["default"].fn[NAME] = JQUERY_NO_CONFLICT;
                return Collapse._jQueryInterface;
            };
            exports_5("default", Collapse);
        }
    };
});
/**
 * --------------------------------------------------------------------------
 * Bootstrap (v4.6.1): dropdown.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */
System.register("dropdown", ["jquery", "popper.js", "util"], function (exports_6, context_6) {
    "use strict";
    var __moduleName = context_6 && context_6.id;
    var jquery_6, popper_js_1, util_4, NAME, VERSION, DATA_KEY, EVENT_KEY, DATA_API_KEY, JQUERY_NO_CONFLICT, ESCAPE_KEYCODE, SPACE_KEYCODE, TAB_KEYCODE, ARROW_UP_KEYCODE, ARROW_DOWN_KEYCODE, RIGHT_MOUSE_BUTTON_WHICH, REGEXP_KEYDOWN, CLASS_NAME_DISABLED, CLASS_NAME_SHOW, CLASS_NAME_DROPUP, CLASS_NAME_DROPRIGHT, CLASS_NAME_DROPLEFT, CLASS_NAME_MENURIGHT, CLASS_NAME_POSITION_STATIC, EVENT_HIDE, EVENT_HIDDEN, EVENT_SHOW, EVENT_SHOWN, EVENT_CLICK, EVENT_CLICK_DATA_API, EVENT_KEYDOWN_DATA_API, EVENT_KEYUP_DATA_API, SELECTOR_DATA_TOGGLE, SELECTOR_FORM_CHILD, SELECTOR_MENU, SELECTOR_NAVBAR_NAV, SELECTOR_VISIBLE_ITEMS, PLACEMENT_TOP, PLACEMENT_TOPEND, PLACEMENT_BOTTOM, PLACEMENT_BOTTOMEND, PLACEMENT_RIGHT, PLACEMENT_LEFT, Default, DefaultType, Dropdown;
    return {
        setters: [
            function (jquery_6_1) {
                jquery_6 = jquery_6_1;
            },
            function (popper_js_1_1) {
                popper_js_1 = popper_js_1_1;
            },
            function (util_4_1) {
                util_4 = util_4_1;
            }
        ],
        execute: function () {/**
             * --------------------------------------------------------------------------
             * Bootstrap (v4.6.1): dropdown.js
             * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
             * --------------------------------------------------------------------------
             */
            /**
             * Constants
             */
            NAME = 'dropdown';
            VERSION = '4.6.1';
            DATA_KEY = 'bs.dropdown';
            EVENT_KEY = "." + DATA_KEY;
            DATA_API_KEY = '.data-api';
            JQUERY_NO_CONFLICT = jquery_6["default"].fn[NAME];
            ESCAPE_KEYCODE = 27; // KeyboardEvent.which value for Escape (Esc) key
            SPACE_KEYCODE = 32; // KeyboardEvent.which value for space key
            TAB_KEYCODE = 9; // KeyboardEvent.which value for tab key
            ARROW_UP_KEYCODE = 38; // KeyboardEvent.which value for up arrow key
            ARROW_DOWN_KEYCODE = 40; // KeyboardEvent.which value for down arrow key
            RIGHT_MOUSE_BUTTON_WHICH = 3; // MouseEvent.which value for the right button (assuming a right-handed mouse)
            REGEXP_KEYDOWN = new RegExp(ARROW_UP_KEYCODE + "|" + ARROW_DOWN_KEYCODE + "|" + ESCAPE_KEYCODE);
            CLASS_NAME_DISABLED = 'disabled';
            CLASS_NAME_SHOW = 'show';
            CLASS_NAME_DROPUP = 'dropup';
            CLASS_NAME_DROPRIGHT = 'dropright';
            CLASS_NAME_DROPLEFT = 'dropleft';
            CLASS_NAME_MENURIGHT = 'dropdown-menu-right';
            CLASS_NAME_POSITION_STATIC = 'position-static';
            EVENT_HIDE = "hide" + EVENT_KEY;
            EVENT_HIDDEN = "hidden" + EVENT_KEY;
            EVENT_SHOW = "show" + EVENT_KEY;
            EVENT_SHOWN = "shown" + EVENT_KEY;
            EVENT_CLICK = "click" + EVENT_KEY;
            EVENT_CLICK_DATA_API = "click" + EVENT_KEY + DATA_API_KEY;
            EVENT_KEYDOWN_DATA_API = "keydown" + EVENT_KEY + DATA_API_KEY;
            EVENT_KEYUP_DATA_API = "keyup" + EVENT_KEY + DATA_API_KEY;
            SELECTOR_DATA_TOGGLE = '[data-toggle="dropdown"]';
            SELECTOR_FORM_CHILD = '.dropdown form';
            SELECTOR_MENU = '.dropdown-menu';
            SELECTOR_NAVBAR_NAV = '.navbar-nav';
            SELECTOR_VISIBLE_ITEMS = '.dropdown-menu .dropdown-item:not(.disabled):not(:disabled)';
            PLACEMENT_TOP = 'top-start';
            PLACEMENT_TOPEND = 'top-end';
            PLACEMENT_BOTTOM = 'bottom-start';
            PLACEMENT_BOTTOMEND = 'bottom-end';
            PLACEMENT_RIGHT = 'right-start';
            PLACEMENT_LEFT = 'left-start';
            Default = {
                offset: 0,
                flip: true,
                boundary: 'scrollParent',
                reference: 'toggle',
                display: 'dynamic',
                popperConfig: null
            };
            DefaultType = {
                offset: '(number|string|function)',
                flip: 'boolean',
                boundary: '(string|element)',
                reference: '(string|element)',
                display: 'string',
                popperConfig: '(null|object)'
            };
            /**
             * Class definition
             */
            Dropdown = (function () {
                function Dropdown(element, config) {
                    this._element = element;
                    this._popper = null;
                    this._config = this._getConfig(config);
                    this._menu = this._getMenuElement();
                    this._inNavbar = this._detectNavbar();
                    this._addEventListeners();
                }
                Object.defineProperty(Dropdown, "VERSION", {
                    // Getters
                    get: function () {
                        return VERSION;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Dropdown, "Default", {
                    get: function () {
                        return Default;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Dropdown, "DefaultType", {
                    get: function () {
                        return DefaultType;
                    },
                    enumerable: true,
                    configurable: true
                });
                // Public
                Dropdown.prototype.toggle = function () {
                    if (this._element.disabled || jquery_6["default"](this._element).hasClass(CLASS_NAME_DISABLED)) {
                        return;
                    }
                    var isActive = jquery_6["default"](this._menu).hasClass(CLASS_NAME_SHOW);
                    Dropdown._clearMenus();
                    if (isActive) {
                        return;
                    }
                    this.show(true);
                };
                Dropdown.prototype.show = function (usePopper) {
                    if (usePopper === void 0) { usePopper = false; }
                    if (this._element.disabled || jquery_6["default"](this._element).hasClass(CLASS_NAME_DISABLED) || jquery_6["default"](this._menu).hasClass(CLASS_NAME_SHOW)) {
                        return;
                    }
                    var relatedTarget = {
                        relatedTarget: this._element
                    };
                    var showEvent = jquery_6["default"].Event(EVENT_SHOW, relatedTarget);
                    var parent = Dropdown._getParentFromElement(this._element);
                    jquery_6["default"](parent).trigger(showEvent);
                    if (showEvent.isDefaultPrevented()) {
                        return;
                    }
                    // Totally disable Popper for Dropdowns in Navbar
                    if (!this._inNavbar && usePopper) {
                        // Check for Popper dependency
                        if (typeof popper_js_1["default"] === 'undefined') {
                            throw new TypeError('Bootstrap\'s dropdowns require Popper (https://popper.js.org)');
                        }
                        var referenceElement = this._element;
                        if (this._config.reference === 'parent') {
                            referenceElement = parent;
                        }
                        else if (util_4["default"].isElement(this._config.reference)) {
                            referenceElement = this._config.reference;
                            // Check if it's jQuery element
                            if (typeof this._config.reference.jquery !== 'undefined') {
                                referenceElement = this._config.reference[0];
                            }
                        }
                        // If boundary is not `scrollParent`, then set position to `static`
                        // to allow the menu to "escape" the scroll parent's boundaries
                        // https://github.com/twbs/bootstrap/issues/24251
                        if (this._config.boundary !== 'scrollParent') {
                            jquery_6["default"](parent).addClass(CLASS_NAME_POSITION_STATIC);
                        }
                        this._popper = new popper_js_1["default"](referenceElement, this._menu, this._getPopperConfig());
                    }
                    // If this is a touch-enabled device we add extra
                    // empty mouseover listeners to the body's immediate children;
                    // only needed because of broken event delegation on iOS
                    // https://www.quirksmode.org/blog/archives/2014/02/mouse_event_bub.html
                    if ('ontouchstart' in document.documentElement &&
                        jquery_6["default"](parent).closest(SELECTOR_NAVBAR_NAV).length === 0) {
                        jquery_6["default"](document.body).children().on('mouseover', null, jquery_6["default"].noop);
                    }
                    this._element.focus();
                    this._element.setAttribute('aria-expanded', true);
                    jquery_6["default"](this._menu).toggleClass(CLASS_NAME_SHOW);
                    jquery_6["default"](parent)
                        .toggleClass(CLASS_NAME_SHOW)
                        .trigger(jquery_6["default"].Event(EVENT_SHOWN, relatedTarget));
                };
                Dropdown.prototype.hide = function () {
                    if (this._element.disabled || jquery_6["default"](this._element).hasClass(CLASS_NAME_DISABLED) || !jquery_6["default"](this._menu).hasClass(CLASS_NAME_SHOW)) {
                        return;
                    }
                    var relatedTarget = {
                        relatedTarget: this._element
                    };
                    var hideEvent = jquery_6["default"].Event(EVENT_HIDE, relatedTarget);
                    var parent = Dropdown._getParentFromElement(this._element);
                    jquery_6["default"](parent).trigger(hideEvent);
                    if (hideEvent.isDefaultPrevented()) {
                        return;
                    }
                    if (this._popper) {
                        this._popper.destroy();
                    }
                    jquery_6["default"](this._menu).toggleClass(CLASS_NAME_SHOW);
                    jquery_6["default"](parent)
                        .toggleClass(CLASS_NAME_SHOW)
                        .trigger(jquery_6["default"].Event(EVENT_HIDDEN, relatedTarget));
                };
                Dropdown.prototype.dispose = function () {
                    jquery_6["default"].removeData(this._element, DATA_KEY);
                    jquery_6["default"](this._element).off(EVENT_KEY);
                    this._element = null;
                    this._menu = null;
                    if (this._popper !== null) {
                        this._popper.destroy();
                        this._popper = null;
                    }
                };
                Dropdown.prototype.update = function () {
                    this._inNavbar = this._detectNavbar();
                    if (this._popper !== null) {
                        this._popper.scheduleUpdate();
                    }
                };
                // Private
                Dropdown.prototype._addEventListeners = function () {
                    var _this = this;
                    jquery_6["default"](this._element).on(EVENT_CLICK, function (event) {
                        event.preventDefault();
                        event.stopPropagation();
                        _this.toggle();
                    });
                };
                Dropdown.prototype._getConfig = function (config) {
                    config = __assign({}, this.constructor.Default, jquery_6["default"](this._element).data(), config);
                    util_4["default"].typeCheckConfig(NAME, config, this.constructor.DefaultType);
                    return config;
                };
                Dropdown.prototype._getMenuElement = function () {
                    if (!this._menu) {
                        var parent_1 = Dropdown._getParentFromElement(this._element);
                        if (parent_1) {
                            this._menu = parent_1.querySelector(SELECTOR_MENU);
                        }
                    }
                    return this._menu;
                };
                Dropdown.prototype._getPlacement = function () {
                    var $parentDropdown = jquery_6["default"](this._element.parentNode);
                    var placement = PLACEMENT_BOTTOM;
                    // Handle dropup
                    if ($parentDropdown.hasClass(CLASS_NAME_DROPUP)) {
                        placement = jquery_6["default"](this._menu).hasClass(CLASS_NAME_MENURIGHT) ?
                            PLACEMENT_TOPEND :
                            PLACEMENT_TOP;
                    }
                    else if ($parentDropdown.hasClass(CLASS_NAME_DROPRIGHT)) {
                        placement = PLACEMENT_RIGHT;
                    }
                    else if ($parentDropdown.hasClass(CLASS_NAME_DROPLEFT)) {
                        placement = PLACEMENT_LEFT;
                    }
                    else if (jquery_6["default"](this._menu).hasClass(CLASS_NAME_MENURIGHT)) {
                        placement = PLACEMENT_BOTTOMEND;
                    }
                    return placement;
                };
                Dropdown.prototype._detectNavbar = function () {
                    return jquery_6["default"](this._element).closest('.navbar').length > 0;
                };
                Dropdown.prototype._getOffset = function () {
                    var _this = this;
                    var offset = {};
                    if (typeof this._config.offset === 'function') {
                        offset.fn = function (data) {
                            data.offsets = __assign({}, data.offsets, _this._config.offset(data.offsets, _this._element));
                            return data;
                        };
                    }
                    else {
                        offset.offset = this._config.offset;
                    }
                    return offset;
                };
                Dropdown.prototype._getPopperConfig = function () {
                    var popperConfig = {
                        placement: this._getPlacement(),
                        modifiers: {
                            offset: this._getOffset(),
                            flip: {
                                enabled: this._config.flip
                            },
                            preventOverflow: {
                                boundariesElement: this._config.boundary
                            }
                        }
                    };
                    // Disable Popper if we have a static display
                    if (this._config.display === 'static') {
                        popperConfig.modifiers.applyStyle = {
                            enabled: false
                        };
                    }
                    return __assign({}, popperConfig, this._config.popperConfig);
                };
                // Static
                Dropdown._jQueryInterface = function (config) {
                    return this.each(function () {
                        var data = jquery_6["default"](this).data(DATA_KEY);
                        var _config = typeof config === 'object' ? config : null;
                        if (!data) {
                            data = new Dropdown(this, _config);
                            jquery_6["default"](this).data(DATA_KEY, data);
                        }
                        if (typeof config === 'string') {
                            if (typeof data[config] === 'undefined') {
                                throw new TypeError("No method named \"" + config + "\"");
                            }
                            data[config]();
                        }
                    });
                };
                Dropdown._clearMenus = function (event) {
                    if (event && (event.which === RIGHT_MOUSE_BUTTON_WHICH ||
                        event.type === 'keyup' && event.which !== TAB_KEYCODE)) {
                        return;
                    }
                    var toggles = [].slice.call(document.querySelectorAll(SELECTOR_DATA_TOGGLE));
                    for (var i = 0, len = toggles.length; i < len; i++) {
                        var parent_2 = Dropdown._getParentFromElement(toggles[i]);
                        var context = jquery_6["default"](toggles[i]).data(DATA_KEY);
                        var relatedTarget = {
                            relatedTarget: toggles[i]
                        };
                        if (event && event.type === 'click') {
                            relatedTarget.clickEvent = event;
                        }
                        if (!context) {
                            continue;
                        }
                        var dropdownMenu = context._menu;
                        if (!jquery_6["default"](parent_2).hasClass(CLASS_NAME_SHOW)) {
                            continue;
                        }
                        if (event && (event.type === 'click' &&
                            /input|textarea/i.test(event.target.tagName) || event.type === 'keyup' && event.which === TAB_KEYCODE) &&
                            jquery_6["default"].contains(parent_2, event.target)) {
                            continue;
                        }
                        var hideEvent = jquery_6["default"].Event(EVENT_HIDE, relatedTarget);
                        jquery_6["default"](parent_2).trigger(hideEvent);
                        if (hideEvent.isDefaultPrevented()) {
                            continue;
                        }
                        // If this is a touch-enabled device we remove the extra
                        // empty mouseover listeners we added for iOS support
                        if ('ontouchstart' in document.documentElement) {
                            jquery_6["default"](document.body).children().off('mouseover', null, jquery_6["default"].noop);
                        }
                        toggles[i].setAttribute('aria-expanded', 'false');
                        if (context._popper) {
                            context._popper.destroy();
                        }
                        jquery_6["default"](dropdownMenu).removeClass(CLASS_NAME_SHOW);
                        jquery_6["default"](parent_2)
                            .removeClass(CLASS_NAME_SHOW)
                            .trigger(jquery_6["default"].Event(EVENT_HIDDEN, relatedTarget));
                    }
                };
                Dropdown._getParentFromElement = function (element) {
                    var parent;
                    var selector = util_4["default"].getSelectorFromElement(element);
                    if (selector) {
                        parent = document.querySelector(selector);
                    }
                    return parent || element.parentNode;
                };
                // eslint-disable-next-line complexity
                Dropdown._dataApiKeydownHandler = function (event) {
                    // If not input/textarea:
                    //  - And not a key in REGEXP_KEYDOWN => not a dropdown command
                    // If input/textarea:
                    //  - If space key => not a dropdown command
                    //  - If key is other than escape
                    //    - If key is not up or down => not a dropdown command
                    //    - If trigger inside the menu => not a dropdown command
                    if (/input|textarea/i.test(event.target.tagName) ?
                        event.which === SPACE_KEYCODE || event.which !== ESCAPE_KEYCODE &&
                            (event.which !== ARROW_DOWN_KEYCODE && event.which !== ARROW_UP_KEYCODE ||
                                jquery_6["default"](event.target).closest(SELECTOR_MENU).length) : !REGEXP_KEYDOWN.test(event.which)) {
                        return;
                    }
                    if (this.disabled || jquery_6["default"](this).hasClass(CLASS_NAME_DISABLED)) {
                        return;
                    }
                    var parent = Dropdown._getParentFromElement(this);
                    var isActive = jquery_6["default"](parent).hasClass(CLASS_NAME_SHOW);
                    if (!isActive && event.which === ESCAPE_KEYCODE) {
                        return;
                    }
                    event.preventDefault();
                    event.stopPropagation();
                    if (!isActive || (event.which === ESCAPE_KEYCODE || event.which === SPACE_KEYCODE)) {
                        if (event.which === ESCAPE_KEYCODE) {
                            jquery_6["default"](parent.querySelector(SELECTOR_DATA_TOGGLE)).trigger('focus');
                        }
                        jquery_6["default"](this).trigger('click');
                        return;
                    }
                    var items = [].slice.call(parent.querySelectorAll(SELECTOR_VISIBLE_ITEMS))
                        .filter(function (item) { return jquery_6["default"](item).is(':visible'); });
                    if (items.length === 0) {
                        return;
                    }
                    var index = items.indexOf(event.target);
                    if (event.which === ARROW_UP_KEYCODE && index > 0) {
                        index--;
                    }
                    if (event.which === ARROW_DOWN_KEYCODE && index < items.length - 1) {
                        index++;
                    }
                    if (index < 0) {
                        index = 0;
                    }
                    items[index].focus();
                };
                return Dropdown;
            }());
            /**
             * Data API implementation
             */
            jquery_6["default"](document)
                .on(EVENT_KEYDOWN_DATA_API, SELECTOR_DATA_TOGGLE, Dropdown._dataApiKeydownHandler)
                .on(EVENT_KEYDOWN_DATA_API, SELECTOR_MENU, Dropdown._dataApiKeydownHandler)
                .on(EVENT_CLICK_DATA_API + " " + EVENT_KEYUP_DATA_API, Dropdown._clearMenus)
                .on(EVENT_CLICK_DATA_API, SELECTOR_DATA_TOGGLE, function (event) {
                event.preventDefault();
                event.stopPropagation();
                Dropdown._jQueryInterface.call(jquery_6["default"](this), 'toggle');
            })
                .on(EVENT_CLICK_DATA_API, SELECTOR_FORM_CHILD, function (e) {
                e.stopPropagation();
            });
            /**
             * jQuery
             */
            jquery_6["default"].fn[NAME] = Dropdown._jQueryInterface;
            jquery_6["default"].fn[NAME].Constructor = Dropdown;
            jquery_6["default"].fn[NAME].noConflict = function () {
                jquery_6["default"].fn[NAME] = JQUERY_NO_CONFLICT;
                return Dropdown._jQueryInterface;
            };
            exports_6("default", Dropdown);
        }
    };
});
/**
 * --------------------------------------------------------------------------
 * Bootstrap (v4.6.1): index.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */
System.register("index", ["./src/alert", "./src/button", "./src/carousel", "./src/collapse", "./src/dropdown", "./src/modal", "./src/popover", "./src/scrollspy", "./src/tab", "./src/toast", "./src/tooltip", "./src/util"], function (exports_7, context_7) {
    "use strict";
    var __moduleName = context_7 && context_7.id;
    var alert_1, button_1, carousel_1, collapse_1, dropdown_1, modal_1, popover_1, scrollspy_1, tab_1, toast_1, tooltip_1, util_5;
    return {
        setters: [
            function (alert_1_1) {
                alert_1 = alert_1_1;
            },
            function (button_1_1) {
                button_1 = button_1_1;
            },
            function (carousel_1_1) {
                carousel_1 = carousel_1_1;
            },
            function (collapse_1_1) {
                collapse_1 = collapse_1_1;
            },
            function (dropdown_1_1) {
                dropdown_1 = dropdown_1_1;
            },
            function (modal_1_1) {
                modal_1 = modal_1_1;
            },
            function (popover_1_1) {
                popover_1 = popover_1_1;
            },
            function (scrollspy_1_1) {
                scrollspy_1 = scrollspy_1_1;
            },
            function (tab_1_1) {
                tab_1 = tab_1_1;
            },
            function (toast_1_1) {
                toast_1 = toast_1_1;
            },
            function (tooltip_1_1) {
                tooltip_1 = tooltip_1_1;
            },
            function (util_5_1) {
                util_5 = util_5_1;
            }
        ],
        execute: function () {/**
             * --------------------------------------------------------------------------
             * Bootstrap (v4.6.1): index.js
             * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
             * --------------------------------------------------------------------------
             */
            exports_7("Alert", alert_1["default"]);
            exports_7("Button", button_1["default"]);
            exports_7("Carousel", carousel_1["default"]);
            exports_7("Collapse", collapse_1["default"]);
            exports_7("Dropdown", dropdown_1["default"]);
            exports_7("Modal", modal_1["default"]);
            exports_7("Popover", popover_1["default"]);
            exports_7("Scrollspy", scrollspy_1["default"]);
            exports_7("Tab", tab_1["default"]);
            exports_7("Toast", toast_1["default"]);
            exports_7("Tooltip", tooltip_1["default"]);
            exports_7("Util", util_5["default"]);
        }
    };
});
/**
 * --------------------------------------------------------------------------
 * Bootstrap (v4.6.1): modal.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */
System.register("modal", ["jquery", "util"], function (exports_8, context_8) {
    "use strict";
    var __moduleName = context_8 && context_8.id;
    var jquery_7, util_6, NAME, VERSION, DATA_KEY, EVENT_KEY, DATA_API_KEY, JQUERY_NO_CONFLICT, ESCAPE_KEYCODE, CLASS_NAME_SCROLLABLE, CLASS_NAME_SCROLLBAR_MEASURER, CLASS_NAME_BACKDROP, CLASS_NAME_OPEN, CLASS_NAME_FADE, CLASS_NAME_SHOW, CLASS_NAME_STATIC, EVENT_HIDE, EVENT_HIDE_PREVENTED, EVENT_HIDDEN, EVENT_SHOW, EVENT_SHOWN, EVENT_FOCUSIN, EVENT_RESIZE, EVENT_CLICK_DISMISS, EVENT_KEYDOWN_DISMISS, EVENT_MOUSEUP_DISMISS, EVENT_MOUSEDOWN_DISMISS, EVENT_CLICK_DATA_API, SELECTOR_DIALOG, SELECTOR_MODAL_BODY, SELECTOR_DATA_TOGGLE, SELECTOR_DATA_DISMISS, SELECTOR_FIXED_CONTENT, SELECTOR_STICKY_CONTENT, Default, DefaultType, Modal;
    return {
        setters: [
            function (jquery_7_1) {
                jquery_7 = jquery_7_1;
            },
            function (util_6_1) {
                util_6 = util_6_1;
            }
        ],
        execute: function () {/**
             * --------------------------------------------------------------------------
             * Bootstrap (v4.6.1): modal.js
             * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
             * --------------------------------------------------------------------------
             */
            /**
             * Constants
             */
            NAME = 'modal';
            VERSION = '4.6.1';
            DATA_KEY = 'bs.modal';
            EVENT_KEY = "." + DATA_KEY;
            DATA_API_KEY = '.data-api';
            JQUERY_NO_CONFLICT = jquery_7["default"].fn[NAME];
            ESCAPE_KEYCODE = 27; // KeyboardEvent.which value for Escape (Esc) key
            CLASS_NAME_SCROLLABLE = 'modal-dialog-scrollable';
            CLASS_NAME_SCROLLBAR_MEASURER = 'modal-scrollbar-measure';
            CLASS_NAME_BACKDROP = 'modal-backdrop';
            CLASS_NAME_OPEN = 'modal-open';
            CLASS_NAME_FADE = 'fade';
            CLASS_NAME_SHOW = 'show';
            CLASS_NAME_STATIC = 'modal-static';
            EVENT_HIDE = "hide" + EVENT_KEY;
            EVENT_HIDE_PREVENTED = "hidePrevented" + EVENT_KEY;
            EVENT_HIDDEN = "hidden" + EVENT_KEY;
            EVENT_SHOW = "show" + EVENT_KEY;
            EVENT_SHOWN = "shown" + EVENT_KEY;
            EVENT_FOCUSIN = "focusin" + EVENT_KEY;
            EVENT_RESIZE = "resize" + EVENT_KEY;
            EVENT_CLICK_DISMISS = "click.dismiss" + EVENT_KEY;
            EVENT_KEYDOWN_DISMISS = "keydown.dismiss" + EVENT_KEY;
            EVENT_MOUSEUP_DISMISS = "mouseup.dismiss" + EVENT_KEY;
            EVENT_MOUSEDOWN_DISMISS = "mousedown.dismiss" + EVENT_KEY;
            EVENT_CLICK_DATA_API = "click" + EVENT_KEY + DATA_API_KEY;
            SELECTOR_DIALOG = '.modal-dialog';
            SELECTOR_MODAL_BODY = '.modal-body';
            SELECTOR_DATA_TOGGLE = '[data-toggle="modal"]';
            SELECTOR_DATA_DISMISS = '[data-dismiss="modal"]';
            SELECTOR_FIXED_CONTENT = '.fixed-top, .fixed-bottom, .is-fixed, .sticky-top';
            SELECTOR_STICKY_CONTENT = '.sticky-top';
            Default = {
                backdrop: true,
                keyboard: true,
                focus: true,
                show: true
            };
            DefaultType = {
                backdrop: '(boolean|string)',
                keyboard: 'boolean',
                focus: 'boolean',
                show: 'boolean'
            };
            /**
             * Class definition
             */
            Modal = (function () {
                function Modal(element, config) {
                    this._config = this._getConfig(config);
                    this._element = element;
                    this._dialog = element.querySelector(SELECTOR_DIALOG);
                    this._backdrop = null;
                    this._isShown = false;
                    this._isBodyOverflowing = false;
                    this._ignoreBackdropClick = false;
                    this._isTransitioning = false;
                    this._scrollbarWidth = 0;
                }
                Object.defineProperty(Modal, "VERSION", {
                    // Getters
                    get: function () {
                        return VERSION;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Modal, "Default", {
                    get: function () {
                        return Default;
                    },
                    enumerable: true,
                    configurable: true
                });
                // Public
                Modal.prototype.toggle = function (relatedTarget) {
                    return this._isShown ? this.hide() : this.show(relatedTarget);
                };
                Modal.prototype.show = function (relatedTarget) {
                    var _this = this;
                    if (this._isShown || this._isTransitioning) {
                        return;
                    }
                    var showEvent = jquery_7["default"].Event(EVENT_SHOW, {
                        relatedTarget: relatedTarget
                    });
                    jquery_7["default"](this._element).trigger(showEvent);
                    if (showEvent.isDefaultPrevented()) {
                        return;
                    }
                    this._isShown = true;
                    if (jquery_7["default"](this._element).hasClass(CLASS_NAME_FADE)) {
                        this._isTransitioning = true;
                    }
                    this._checkScrollbar();
                    this._setScrollbar();
                    this._adjustDialog();
                    this._setEscapeEvent();
                    this._setResizeEvent();
                    jquery_7["default"](this._element).on(EVENT_CLICK_DISMISS, SELECTOR_DATA_DISMISS, function (event) { return _this.hide(event); });
                    jquery_7["default"](this._dialog).on(EVENT_MOUSEDOWN_DISMISS, function () {
                        jquery_7["default"](_this._element).one(EVENT_MOUSEUP_DISMISS, function (event) {
                            if (jquery_7["default"](event.target).is(_this._element)) {
                                _this._ignoreBackdropClick = true;
                            }
                        });
                    });
                    this._showBackdrop(function () { return _this._showElement(relatedTarget); });
                };
                Modal.prototype.hide = function (event) {
                    var _this = this;
                    if (event) {
                        event.preventDefault();
                    }
                    if (!this._isShown || this._isTransitioning) {
                        return;
                    }
                    var hideEvent = jquery_7["default"].Event(EVENT_HIDE);
                    jquery_7["default"](this._element).trigger(hideEvent);
                    if (!this._isShown || hideEvent.isDefaultPrevented()) {
                        return;
                    }
                    this._isShown = false;
                    var transition = jquery_7["default"](this._element).hasClass(CLASS_NAME_FADE);
                    if (transition) {
                        this._isTransitioning = true;
                    }
                    this._setEscapeEvent();
                    this._setResizeEvent();
                    jquery_7["default"](document).off(EVENT_FOCUSIN);
                    jquery_7["default"](this._element).removeClass(CLASS_NAME_SHOW);
                    jquery_7["default"](this._element).off(EVENT_CLICK_DISMISS);
                    jquery_7["default"](this._dialog).off(EVENT_MOUSEDOWN_DISMISS);
                    if (transition) {
                        var transitionDuration = util_6["default"].getTransitionDurationFromElement(this._element);
                        jquery_7["default"](this._element)
                            .one(util_6["default"].TRANSITION_END, function (event) { return _this._hideModal(event); })
                            .emulateTransitionEnd(transitionDuration);
                    }
                    else {
                        this._hideModal();
                    }
                };
                Modal.prototype.dispose = function () {
                    [window, this._element, this._dialog]
                        .forEach(function (htmlElement) { return jquery_7["default"](htmlElement).off(EVENT_KEY); });
                    /**
                     * `document` has 2 events `EVENT_FOCUSIN` and `EVENT_CLICK_DATA_API`
                     * Do not move `document` in `htmlElements` array
                     * It will remove `EVENT_CLICK_DATA_API` event that should remain
                     */
                    jquery_7["default"](document).off(EVENT_FOCUSIN);
                    jquery_7["default"].removeData(this._element, DATA_KEY);
                    this._config = null;
                    this._element = null;
                    this._dialog = null;
                    this._backdrop = null;
                    this._isShown = null;
                    this._isBodyOverflowing = null;
                    this._ignoreBackdropClick = null;
                    this._isTransitioning = null;
                    this._scrollbarWidth = null;
                };
                Modal.prototype.handleUpdate = function () {
                    this._adjustDialog();
                };
                // Private
                Modal.prototype._getConfig = function (config) {
                    config = __assign({}, Default, config);
                    util_6["default"].typeCheckConfig(NAME, config, DefaultType);
                    return config;
                };
                Modal.prototype._triggerBackdropTransition = function () {
                    var _this = this;
                    var hideEventPrevented = jquery_7["default"].Event(EVENT_HIDE_PREVENTED);
                    jquery_7["default"](this._element).trigger(hideEventPrevented);
                    if (hideEventPrevented.isDefaultPrevented()) {
                        return;
                    }
                    var isModalOverflowing = this._element.scrollHeight > document.documentElement.clientHeight;
                    if (!isModalOverflowing) {
                        this._element.style.overflowY = 'hidden';
                    }
                    this._element.classList.add(CLASS_NAME_STATIC);
                    var modalTransitionDuration = util_6["default"].getTransitionDurationFromElement(this._dialog);
                    jquery_7["default"](this._element).off(util_6["default"].TRANSITION_END);
                    jquery_7["default"](this._element).one(util_6["default"].TRANSITION_END, function () {
                        _this._element.classList.remove(CLASS_NAME_STATIC);
                        if (!isModalOverflowing) {
                            jquery_7["default"](_this._element).one(util_6["default"].TRANSITION_END, function () {
                                _this._element.style.overflowY = '';
                            })
                                .emulateTransitionEnd(_this._element, modalTransitionDuration);
                        }
                    })
                        .emulateTransitionEnd(modalTransitionDuration);
                    this._element.focus();
                };
                Modal.prototype._showElement = function (relatedTarget) {
                    var _this = this;
                    var transition = jquery_7["default"](this._element).hasClass(CLASS_NAME_FADE);
                    var modalBody = this._dialog ? this._dialog.querySelector(SELECTOR_MODAL_BODY) : null;
                    if (!this._element.parentNode ||
                        this._element.parentNode.nodeType !== Node.ELEMENT_NODE) {
                        // Don't move modal's DOM position
                        document.body.appendChild(this._element);
                    }
                    this._element.style.display = 'block';
                    this._element.removeAttribute('aria-hidden');
                    this._element.setAttribute('aria-modal', true);
                    this._element.setAttribute('role', 'dialog');
                    if (jquery_7["default"](this._dialog).hasClass(CLASS_NAME_SCROLLABLE) && modalBody) {
                        modalBody.scrollTop = 0;
                    }
                    else {
                        this._element.scrollTop = 0;
                    }
                    if (transition) {
                        util_6["default"].reflow(this._element);
                    }
                    jquery_7["default"](this._element).addClass(CLASS_NAME_SHOW);
                    if (this._config.focus) {
                        this._enforceFocus();
                    }
                    var shownEvent = jquery_7["default"].Event(EVENT_SHOWN, {
                        relatedTarget: relatedTarget
                    });
                    var transitionComplete = function () {
                        if (_this._config.focus) {
                            _this._element.focus();
                        }
                        _this._isTransitioning = false;
                        jquery_7["default"](_this._element).trigger(shownEvent);
                    };
                    if (transition) {
                        var transitionDuration = util_6["default"].getTransitionDurationFromElement(this._dialog);
                        jquery_7["default"](this._dialog)
                            .one(util_6["default"].TRANSITION_END, transitionComplete)
                            .emulateTransitionEnd(transitionDuration);
                    }
                    else {
                        transitionComplete();
                    }
                };
                Modal.prototype._enforceFocus = function () {
                    var _this = this;
                    jquery_7["default"](document)
                        .off(EVENT_FOCUSIN) // Guard against infinite focus loop
                        .on(EVENT_FOCUSIN, function (event) {
                        if (document !== event.target &&
                            _this._element !== event.target &&
                            jquery_7["default"](_this._element).has(event.target).length === 0) {
                            _this._element.focus();
                        }
                    });
                };
                Modal.prototype._setEscapeEvent = function () {
                    var _this = this;
                    if (this._isShown) {
                        jquery_7["default"](this._element).on(EVENT_KEYDOWN_DISMISS, function (event) {
                            if (_this._config.keyboard && event.which === ESCAPE_KEYCODE) {
                                event.preventDefault();
                                _this.hide();
                            }
                            else if (!_this._config.keyboard && event.which === ESCAPE_KEYCODE) {
                                _this._triggerBackdropTransition();
                            }
                        });
                    }
                    else if (!this._isShown) {
                        jquery_7["default"](this._element).off(EVENT_KEYDOWN_DISMISS);
                    }
                };
                Modal.prototype._setResizeEvent = function () {
                    var _this = this;
                    if (this._isShown) {
                        jquery_7["default"](window).on(EVENT_RESIZE, function (event) { return _this.handleUpdate(event); });
                    }
                    else {
                        jquery_7["default"](window).off(EVENT_RESIZE);
                    }
                };
                Modal.prototype._hideModal = function () {
                    var _this = this;
                    this._element.style.display = 'none';
                    this._element.setAttribute('aria-hidden', true);
                    this._element.removeAttribute('aria-modal');
                    this._element.removeAttribute('role');
                    this._isTransitioning = false;
                    this._showBackdrop(function () {
                        jquery_7["default"](document.body).removeClass(CLASS_NAME_OPEN);
                        _this._resetAdjustments();
                        _this._resetScrollbar();
                        jquery_7["default"](_this._element).trigger(EVENT_HIDDEN);
                    });
                };
                Modal.prototype._removeBackdrop = function () {
                    if (this._backdrop) {
                        jquery_7["default"](this._backdrop).remove();
                        this._backdrop = null;
                    }
                };
                Modal.prototype._showBackdrop = function (callback) {
                    var _this = this;
                    var animate = jquery_7["default"](this._element).hasClass(CLASS_NAME_FADE) ?
                        CLASS_NAME_FADE : '';
                    if (this._isShown && this._config.backdrop) {
                        this._backdrop = document.createElement('div');
                        this._backdrop.className = CLASS_NAME_BACKDROP;
                        if (animate) {
                            this._backdrop.classList.add(animate);
                        }
                        jquery_7["default"](this._backdrop).appendTo(document.body);
                        jquery_7["default"](this._element).on(EVENT_CLICK_DISMISS, function (event) {
                            if (_this._ignoreBackdropClick) {
                                _this._ignoreBackdropClick = false;
                                return;
                            }
                            if (event.target !== event.currentTarget) {
                                return;
                            }
                            if (_this._config.backdrop === 'static') {
                                _this._triggerBackdropTransition();
                            }
                            else {
                                _this.hide();
                            }
                        });
                        if (animate) {
                            util_6["default"].reflow(this._backdrop);
                        }
                        jquery_7["default"](this._backdrop).addClass(CLASS_NAME_SHOW);
                        if (!callback) {
                            return;
                        }
                        if (!animate) {
                            callback();
                            return;
                        }
                        var backdropTransitionDuration = util_6["default"].getTransitionDurationFromElement(this._backdrop);
                        jquery_7["default"](this._backdrop)
                            .one(util_6["default"].TRANSITION_END, callback)
                            .emulateTransitionEnd(backdropTransitionDuration);
                    }
                    else if (!this._isShown && this._backdrop) {
                        jquery_7["default"](this._backdrop).removeClass(CLASS_NAME_SHOW);
                        var callbackRemove = function () {
                            _this._removeBackdrop();
                            if (callback) {
                                callback();
                            }
                        };
                        if (jquery_7["default"](this._element).hasClass(CLASS_NAME_FADE)) {
                            var backdropTransitionDuration = util_6["default"].getTransitionDurationFromElement(this._backdrop);
                            jquery_7["default"](this._backdrop)
                                .one(util_6["default"].TRANSITION_END, callbackRemove)
                                .emulateTransitionEnd(backdropTransitionDuration);
                        }
                        else {
                            callbackRemove();
                        }
                    }
                    else if (callback) {
                        callback();
                    }
                };
                // ----------------------------------------------------------------------
                // the following methods are used to handle overflowing modals
                // todo (fat): these should probably be refactored out of modal.js
                // ----------------------------------------------------------------------
                Modal.prototype._adjustDialog = function () {
                    var isModalOverflowing = this._element.scrollHeight > document.documentElement.clientHeight;
                    if (!this._isBodyOverflowing && isModalOverflowing) {
                        this._element.style.paddingLeft = this._scrollbarWidth + "px";
                    }
                    if (this._isBodyOverflowing && !isModalOverflowing) {
                        this._element.style.paddingRight = this._scrollbarWidth + "px";
                    }
                };
                Modal.prototype._resetAdjustments = function () {
                    this._element.style.paddingLeft = '';
                    this._element.style.paddingRight = '';
                };
                Modal.prototype._checkScrollbar = function () {
                    var rect = document.body.getBoundingClientRect();
                    this._isBodyOverflowing = Math.round(rect.left + rect.right) < window.innerWidth;
                    this._scrollbarWidth = this._getScrollbarWidth();
                };
                Modal.prototype._setScrollbar = function () {
                    var _this = this;
                    if (this._isBodyOverflowing) {
                        // Note: DOMNode.style.paddingRight returns the actual value or '' if not set
                        //   while $(DOMNode).css('padding-right') returns the calculated value or 0 if not set
                        var fixedContent = [].slice.call(document.querySelectorAll(SELECTOR_FIXED_CONTENT));
                        var stickyContent = [].slice.call(document.querySelectorAll(SELECTOR_STICKY_CONTENT));
                        // Adjust fixed content padding
                        jquery_7["default"](fixedContent).each(function (index, element) {
                            var actualPadding = element.style.paddingRight;
                            var calculatedPadding = jquery_7["default"](element).css('padding-right');
                            jquery_7["default"](element)
                                .data('padding-right', actualPadding)
                                .css('padding-right', parseFloat(calculatedPadding) + _this._scrollbarWidth + "px");
                        });
                        // Adjust sticky content margin
                        jquery_7["default"](stickyContent).each(function (index, element) {
                            var actualMargin = element.style.marginRight;
                            var calculatedMargin = jquery_7["default"](element).css('margin-right');
                            jquery_7["default"](element)
                                .data('margin-right', actualMargin)
                                .css('margin-right', parseFloat(calculatedMargin) - _this._scrollbarWidth + "px");
                        });
                        // Adjust body padding
                        var actualPadding = document.body.style.paddingRight;
                        var calculatedPadding = jquery_7["default"](document.body).css('padding-right');
                        jquery_7["default"](document.body)
                            .data('padding-right', actualPadding)
                            .css('padding-right', parseFloat(calculatedPadding) + this._scrollbarWidth + "px");
                    }
                    jquery_7["default"](document.body).addClass(CLASS_NAME_OPEN);
                };
                Modal.prototype._resetScrollbar = function () {
                    // Restore fixed content padding
                    var fixedContent = [].slice.call(document.querySelectorAll(SELECTOR_FIXED_CONTENT));
                    jquery_7["default"](fixedContent).each(function (index, element) {
                        var padding = jquery_7["default"](element).data('padding-right');
                        jquery_7["default"](element).removeData('padding-right');
                        element.style.paddingRight = padding ? padding : '';
                    });
                    // Restore sticky content
                    var elements = [].slice.call(document.querySelectorAll("" + SELECTOR_STICKY_CONTENT));
                    jquery_7["default"](elements).each(function (index, element) {
                        var margin = jquery_7["default"](element).data('margin-right');
                        if (typeof margin !== 'undefined') {
                            jquery_7["default"](element).css('margin-right', margin).removeData('margin-right');
                        }
                    });
                    // Restore body padding
                    var padding = jquery_7["default"](document.body).data('padding-right');
                    jquery_7["default"](document.body).removeData('padding-right');
                    document.body.style.paddingRight = padding ? padding : '';
                };
                Modal.prototype._getScrollbarWidth = function () {
                    var scrollDiv = document.createElement('div');
                    scrollDiv.className = CLASS_NAME_SCROLLBAR_MEASURER;
                    document.body.appendChild(scrollDiv);
                    var scrollbarWidth = scrollDiv.getBoundingClientRect().width - scrollDiv.clientWidth;
                    document.body.removeChild(scrollDiv);
                    return scrollbarWidth;
                };
                // Static
                Modal._jQueryInterface = function (config, relatedTarget) {
                    return this.each(function () {
                        var data = jquery_7["default"](this).data(DATA_KEY);
                        var _config = __assign({}, Default, jquery_7["default"](this).data(), (typeof config === 'object' && config ? config : {}));
                        if (!data) {
                            data = new Modal(this, _config);
                            jquery_7["default"](this).data(DATA_KEY, data);
                        }
                        if (typeof config === 'string') {
                            if (typeof data[config] === 'undefined') {
                                throw new TypeError("No method named \"" + config + "\"");
                            }
                            data[config](relatedTarget);
                        }
                        else if (_config.show) {
                            data.show(relatedTarget);
                        }
                    });
                };
                return Modal;
            }());
            /**
             * Data API implementation
             */
            jquery_7["default"](document).on(EVENT_CLICK_DATA_API, SELECTOR_DATA_TOGGLE, function (event) {
                var _this = this;
                var target;
                var selector = util_6["default"].getSelectorFromElement(this);
                if (selector) {
                    target = document.querySelector(selector);
                }
                var config = jquery_7["default"](target).data(DATA_KEY) ?
                    'toggle' : __assign({}, jquery_7["default"](target).data(), jquery_7["default"](this).data());
                if (this.tagName === 'A' || this.tagName === 'AREA') {
                    event.preventDefault();
                }
                var $target = jquery_7["default"](target).one(EVENT_SHOW, function (showEvent) {
                    if (showEvent.isDefaultPrevented()) {
                        // Only register focus restorer if modal will actually get shown
                        return;
                    }
                    $target.one(EVENT_HIDDEN, function () {
                        if (jquery_7["default"](_this).is(':visible')) {
                            _this.focus();
                        }
                    });
                });
                Modal._jQueryInterface.call(jquery_7["default"](target), config, this);
            });
            /**
             * jQuery
             */
            jquery_7["default"].fn[NAME] = Modal._jQueryInterface;
            jquery_7["default"].fn[NAME].Constructor = Modal;
            jquery_7["default"].fn[NAME].noConflict = function () {
                jquery_7["default"].fn[NAME] = JQUERY_NO_CONFLICT;
                return Modal._jQueryInterface;
            };
            exports_8("default", Modal);
        }
    };
});
/**
 * --------------------------------------------------------------------------
 * Bootstrap (v4.6.1): tools/sanitizer.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */
System.register("tools/sanitizer", [], function (exports_9, context_9) {
    "use strict";
    var __moduleName = context_9 && context_9.id;
    function allowedAttribute(attr, allowedAttributeList) {
        var attrName = attr.nodeName.toLowerCase();
        if (allowedAttributeList.indexOf(attrName) !== -1) {
            if (uriAttrs.indexOf(attrName) !== -1) {
                return Boolean(SAFE_URL_PATTERN.test(attr.nodeValue) || DATA_URL_PATTERN.test(attr.nodeValue));
            }
            return true;
        }
        var regExp = allowedAttributeList.filter(function (attrRegex) { return attrRegex instanceof RegExp; });
        // Check if a regular expression validates the attribute.
        for (var i = 0, len = regExp.length; i < len; i++) {
            if (regExp[i].test(attrName)) {
                return true;
            }
        }
        return false;
    }
    function sanitizeHtml(unsafeHtml, whiteList, sanitizeFn) {
        if (unsafeHtml.length === 0) {
            return unsafeHtml;
        }
        if (sanitizeFn && typeof sanitizeFn === 'function') {
            return sanitizeFn(unsafeHtml);
        }
        var domParser = new window.DOMParser();
        var createdDocument = domParser.parseFromString(unsafeHtml, 'text/html');
        var whitelistKeys = Object.keys(whiteList);
        var elements = [].slice.call(createdDocument.body.querySelectorAll('*'));
        var _loop_1 = function (i, len) {
            var el = elements[i];
            var elName = el.nodeName.toLowerCase();
            if (whitelistKeys.indexOf(el.nodeName.toLowerCase()) === -1) {
                el.parentNode.removeChild(el);
                return "continue";
            }
            var attributeList = [].slice.call(el.attributes);
            // eslint-disable-next-line unicorn/prefer-spread
            var whitelistedAttributes = [].concat(whiteList['*'] || [], whiteList[elName] || []);
            attributeList.forEach(function (attr) {
                if (!allowedAttribute(attr, whitelistedAttributes)) {
                    el.removeAttribute(attr.nodeName);
                }
            });
        };
        for (var i = 0, len = elements.length; i < len; i++) {
            _loop_1(i, len);
        }
        return createdDocument.body.innerHTML;
    }
    exports_9("sanitizeHtml", sanitizeHtml);
    var uriAttrs, ARIA_ATTRIBUTE_PATTERN, DefaultWhitelist, SAFE_URL_PATTERN, DATA_URL_PATTERN;
    return {
        setters: [],
        execute: function () {/**
             * --------------------------------------------------------------------------
             * Bootstrap (v4.6.1): tools/sanitizer.js
             * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
             * --------------------------------------------------------------------------
             */
            uriAttrs = [
                'background',
                'cite',
                'href',
                'itemtype',
                'longdesc',
                'poster',
                'src',
                'xlink:href'
            ];
            ARIA_ATTRIBUTE_PATTERN = /^aria-[\w-]*$/i;
            exports_9("DefaultWhitelist", DefaultWhitelist = {
                // Global attributes allowed on any supplied element below.
                '*': ['class', 'dir', 'id', 'lang', 'role', ARIA_ATTRIBUTE_PATTERN],
                a: ['target', 'href', 'title', 'rel'],
                area: [],
                b: [],
                br: [],
                col: [],
                code: [],
                div: [],
                em: [],
                hr: [],
                h1: [],
                h2: [],
                h3: [],
                h4: [],
                h5: [],
                h6: [],
                i: [],
                img: ['src', 'srcset', 'alt', 'title', 'width', 'height'],
                li: [],
                ol: [],
                p: [],
                pre: [],
                s: [],
                small: [],
                span: [],
                sub: [],
                sup: [],
                strong: [],
                u: [],
                ul: []
            });
            /**
             * A pattern that recognizes a commonly useful subset of URLs that are safe.
             *
             * Shoutout to Angular https://github.com/angular/angular/blob/12.2.x/packages/core/src/sanitization/url_sanitizer.ts
             */
            SAFE_URL_PATTERN = /^(?:(?:https?|mailto|ftp|tel|file|sms):|[^#&/:?]*(?:[#/?]|$))/i;
            /**
             * A pattern that matches safe data URLs. Only matches image, video and audio types.
             *
             * Shoutout to Angular https://github.com/angular/angular/blob/12.2.x/packages/core/src/sanitization/url_sanitizer.ts
             */
            DATA_URL_PATTERN = /^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[\d+/a-z]+=*$/i;
        }
    };
});
/**
 * --------------------------------------------------------------------------
 * Bootstrap (v4.6.1): tooltip.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */
System.register("tooltip", ["tools/sanitizer", "jquery", "popper.js", "util"], function (exports_10, context_10) {
    "use strict";
    var __moduleName = context_10 && context_10.id;
    var sanitizer_1, jquery_8, popper_js_2, util_7, NAME, VERSION, DATA_KEY, EVENT_KEY, JQUERY_NO_CONFLICT, CLASS_PREFIX, BSCLS_PREFIX_REGEX, DISALLOWED_ATTRIBUTES, CLASS_NAME_FADE, CLASS_NAME_SHOW, HOVER_STATE_SHOW, HOVER_STATE_OUT, SELECTOR_TOOLTIP_INNER, SELECTOR_ARROW, TRIGGER_HOVER, TRIGGER_FOCUS, TRIGGER_CLICK, TRIGGER_MANUAL, AttachmentMap, Default, DefaultType, Event, Tooltip;
    return {
        setters: [
            function (sanitizer_1_1) {
                sanitizer_1 = sanitizer_1_1;
            },
            function (jquery_8_1) {
                jquery_8 = jquery_8_1;
            },
            function (popper_js_2_1) {
                popper_js_2 = popper_js_2_1;
            },
            function (util_7_1) {
                util_7 = util_7_1;
            }
        ],
        execute: function () {/**
             * --------------------------------------------------------------------------
             * Bootstrap (v4.6.1): tooltip.js
             * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
             * --------------------------------------------------------------------------
             */
            /**
             * Constants
             */
            NAME = 'tooltip';
            VERSION = '4.6.1';
            DATA_KEY = 'bs.tooltip';
            EVENT_KEY = "." + DATA_KEY;
            JQUERY_NO_CONFLICT = jquery_8["default"].fn[NAME];
            CLASS_PREFIX = 'bs-tooltip';
            BSCLS_PREFIX_REGEX = new RegExp("(^|\\s)" + CLASS_PREFIX + "\\S+", 'g');
            DISALLOWED_ATTRIBUTES = ['sanitize', 'whiteList', 'sanitizeFn'];
            CLASS_NAME_FADE = 'fade';
            CLASS_NAME_SHOW = 'show';
            HOVER_STATE_SHOW = 'show';
            HOVER_STATE_OUT = 'out';
            SELECTOR_TOOLTIP_INNER = '.tooltip-inner';
            SELECTOR_ARROW = '.arrow';
            TRIGGER_HOVER = 'hover';
            TRIGGER_FOCUS = 'focus';
            TRIGGER_CLICK = 'click';
            TRIGGER_MANUAL = 'manual';
            AttachmentMap = {
                AUTO: 'auto',
                TOP: 'top',
                RIGHT: 'right',
                BOTTOM: 'bottom',
                LEFT: 'left'
            };
            Default = {
                animation: true,
                template: '<div class="tooltip" role="tooltip">' +
                    '<div class="arrow"></div>' +
                    '<div class="tooltip-inner"></div></div>',
                trigger: 'hover focus',
                title: '',
                delay: 0,
                html: false,
                selector: false,
                placement: 'top',
                offset: 0,
                container: false,
                fallbackPlacement: 'flip',
                boundary: 'scrollParent',
                customClass: '',
                sanitize: true,
                sanitizeFn: null,
                whiteList: sanitizer_1.DefaultWhitelist,
                popperConfig: null
            };
            DefaultType = {
                animation: 'boolean',
                template: 'string',
                title: '(string|element|function)',
                trigger: 'string',
                delay: '(number|object)',
                html: 'boolean',
                selector: '(string|boolean)',
                placement: '(string|function)',
                offset: '(number|string|function)',
                container: '(string|element|boolean)',
                fallbackPlacement: '(string|array)',
                boundary: '(string|element)',
                customClass: '(string|function)',
                sanitize: 'boolean',
                sanitizeFn: '(null|function)',
                whiteList: 'object',
                popperConfig: '(null|object)'
            };
            Event = {
                HIDE: "hide" + EVENT_KEY,
                HIDDEN: "hidden" + EVENT_KEY,
                SHOW: "show" + EVENT_KEY,
                SHOWN: "shown" + EVENT_KEY,
                INSERTED: "inserted" + EVENT_KEY,
                CLICK: "click" + EVENT_KEY,
                FOCUSIN: "focusin" + EVENT_KEY,
                FOCUSOUT: "focusout" + EVENT_KEY,
                MOUSEENTER: "mouseenter" + EVENT_KEY,
                MOUSELEAVE: "mouseleave" + EVENT_KEY
            };
            /**
             * Class definition
             */
            Tooltip = (function () {
                function Tooltip(element, config) {
                    if (typeof popper_js_2["default"] === 'undefined') {
                        throw new TypeError('Bootstrap\'s tooltips require Popper (https://popper.js.org)');
                    }
                    // Private
                    this._isEnabled = true;
                    this._timeout = 0;
                    this._hoverState = '';
                    this._activeTrigger = {};
                    this._popper = null;
                    // Protected
                    this.element = element;
                    this.config = this._getConfig(config);
                    this.tip = null;
                    this._setListeners();
                }
                Object.defineProperty(Tooltip, "VERSION", {
                    // Getters
                    get: function () {
                        return VERSION;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Tooltip, "Default", {
                    get: function () {
                        return Default;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Tooltip, "NAME", {
                    get: function () {
                        return NAME;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Tooltip, "DATA_KEY", {
                    get: function () {
                        return DATA_KEY;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Tooltip, "Event", {
                    get: function () {
                        return Event;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Tooltip, "EVENT_KEY", {
                    get: function () {
                        return EVENT_KEY;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Tooltip, "DefaultType", {
                    get: function () {
                        return DefaultType;
                    },
                    enumerable: true,
                    configurable: true
                });
                // Public
                Tooltip.prototype.enable = function () {
                    this._isEnabled = true;
                };
                Tooltip.prototype.disable = function () {
                    this._isEnabled = false;
                };
                Tooltip.prototype.toggleEnabled = function () {
                    this._isEnabled = !this._isEnabled;
                };
                Tooltip.prototype.toggle = function (event) {
                    if (!this._isEnabled) {
                        return;
                    }
                    if (event) {
                        var dataKey = this.constructor.DATA_KEY;
                        var context = jquery_8["default"](event.currentTarget).data(dataKey);
                        if (!context) {
                            context = new this.constructor(event.currentTarget, this._getDelegateConfig());
                            jquery_8["default"](event.currentTarget).data(dataKey, context);
                        }
                        context._activeTrigger.click = !context._activeTrigger.click;
                        if (context._isWithActiveTrigger()) {
                            context._enter(null, context);
                        }
                        else {
                            context._leave(null, context);
                        }
                    }
                    else {
                        if (jquery_8["default"](this.getTipElement()).hasClass(CLASS_NAME_SHOW)) {
                            this._leave(null, this);
                            return;
                        }
                        this._enter(null, this);
                    }
                };
                Tooltip.prototype.dispose = function () {
                    clearTimeout(this._timeout);
                    jquery_8["default"].removeData(this.element, this.constructor.DATA_KEY);
                    jquery_8["default"](this.element).off(this.constructor.EVENT_KEY);
                    jquery_8["default"](this.element).closest('.modal').off('hide.bs.modal', this._hideModalHandler);
                    if (this.tip) {
                        jquery_8["default"](this.tip).remove();
                    }
                    this._isEnabled = null;
                    this._timeout = null;
                    this._hoverState = null;
                    this._activeTrigger = null;
                    if (this._popper) {
                        this._popper.destroy();
                    }
                    this._popper = null;
                    this.element = null;
                    this.config = null;
                    this.tip = null;
                };
                Tooltip.prototype.show = function () {
                    var _this = this;
                    if (jquery_8["default"](this.element).css('display') === 'none') {
                        throw new Error('Please use show on visible elements');
                    }
                    var showEvent = jquery_8["default"].Event(this.constructor.Event.SHOW);
                    if (this.isWithContent() && this._isEnabled) {
                        jquery_8["default"](this.element).trigger(showEvent);
                        var shadowRoot = util_7["default"].findShadowRoot(this.element);
                        var isInTheDom = jquery_8["default"].contains(shadowRoot !== null ? shadowRoot : this.element.ownerDocument.documentElement, this.element);
                        if (showEvent.isDefaultPrevented() || !isInTheDom) {
                            return;
                        }
                        var tip = this.getTipElement();
                        var tipId = util_7["default"].getUID(this.constructor.NAME);
                        tip.setAttribute('id', tipId);
                        this.element.setAttribute('aria-describedby', tipId);
                        this.setContent();
                        if (this.config.animation) {
                            jquery_8["default"](tip).addClass(CLASS_NAME_FADE);
                        }
                        var placement = typeof this.config.placement === 'function' ?
                            this.config.placement.call(this, tip, this.element) :
                            this.config.placement;
                        var attachment = this._getAttachment(placement);
                        this.addAttachmentClass(attachment);
                        var container = this._getContainer();
                        jquery_8["default"](tip).data(this.constructor.DATA_KEY, this);
                        if (!jquery_8["default"].contains(this.element.ownerDocument.documentElement, this.tip)) {
                            jquery_8["default"](tip).appendTo(container);
                        }
                        jquery_8["default"](this.element).trigger(this.constructor.Event.INSERTED);
                        this._popper = new popper_js_2["default"](this.element, tip, this._getPopperConfig(attachment));
                        jquery_8["default"](tip).addClass(CLASS_NAME_SHOW);
                        jquery_8["default"](tip).addClass(this.config.customClass);
                        // If this is a touch-enabled device we add extra
                        // empty mouseover listeners to the body's immediate children;
                        // only needed because of broken event delegation on iOS
                        // https://www.quirksmode.org/blog/archives/2014/02/mouse_event_bub.html
                        if ('ontouchstart' in document.documentElement) {
                            jquery_8["default"](document.body).children().on('mouseover', null, jquery_8["default"].noop);
                        }
                        var complete = function () {
                            if (_this.config.animation) {
                                _this._fixTransition();
                            }
                            var prevHoverState = _this._hoverState;
                            _this._hoverState = null;
                            jquery_8["default"](_this.element).trigger(_this.constructor.Event.SHOWN);
                            if (prevHoverState === HOVER_STATE_OUT) {
                                _this._leave(null, _this);
                            }
                        };
                        if (jquery_8["default"](this.tip).hasClass(CLASS_NAME_FADE)) {
                            var transitionDuration = util_7["default"].getTransitionDurationFromElement(this.tip);
                            jquery_8["default"](this.tip)
                                .one(util_7["default"].TRANSITION_END, complete)
                                .emulateTransitionEnd(transitionDuration);
                        }
                        else {
                            complete();
                        }
                    }
                };
                Tooltip.prototype.hide = function (callback) {
                    var _this = this;
                    var tip = this.getTipElement();
                    var hideEvent = jquery_8["default"].Event(this.constructor.Event.HIDE);
                    var complete = function () {
                        if (_this._hoverState !== HOVER_STATE_SHOW && tip.parentNode) {
                            tip.parentNode.removeChild(tip);
                        }
                        _this._cleanTipClass();
                        _this.element.removeAttribute('aria-describedby');
                        jquery_8["default"](_this.element).trigger(_this.constructor.Event.HIDDEN);
                        if (_this._popper !== null) {
                            _this._popper.destroy();
                        }
                        if (callback) {
                            callback();
                        }
                    };
                    jquery_8["default"](this.element).trigger(hideEvent);
                    if (hideEvent.isDefaultPrevented()) {
                        return;
                    }
                    jquery_8["default"](tip).removeClass(CLASS_NAME_SHOW);
                    // If this is a touch-enabled device we remove the extra
                    // empty mouseover listeners we added for iOS support
                    if ('ontouchstart' in document.documentElement) {
                        jquery_8["default"](document.body).children().off('mouseover', null, jquery_8["default"].noop);
                    }
                    this._activeTrigger[TRIGGER_CLICK] = false;
                    this._activeTrigger[TRIGGER_FOCUS] = false;
                    this._activeTrigger[TRIGGER_HOVER] = false;
                    if (jquery_8["default"](this.tip).hasClass(CLASS_NAME_FADE)) {
                        var transitionDuration = util_7["default"].getTransitionDurationFromElement(tip);
                        jquery_8["default"](tip)
                            .one(util_7["default"].TRANSITION_END, complete)
                            .emulateTransitionEnd(transitionDuration);
                    }
                    else {
                        complete();
                    }
                    this._hoverState = '';
                };
                Tooltip.prototype.update = function () {
                    if (this._popper !== null) {
                        this._popper.scheduleUpdate();
                    }
                };
                // Protected
                Tooltip.prototype.isWithContent = function () {
                    return Boolean(this.getTitle());
                };
                Tooltip.prototype.addAttachmentClass = function (attachment) {
                    jquery_8["default"](this.getTipElement()).addClass(CLASS_PREFIX + "-" + attachment);
                };
                Tooltip.prototype.getTipElement = function () {
                    this.tip = this.tip || jquery_8["default"](this.config.template)[0];
                    return this.tip;
                };
                Tooltip.prototype.setContent = function () {
                    var tip = this.getTipElement();
                    this.setElementContent(jquery_8["default"](tip.querySelectorAll(SELECTOR_TOOLTIP_INNER)), this.getTitle());
                    jquery_8["default"](tip).removeClass(CLASS_NAME_FADE + " " + CLASS_NAME_SHOW);
                };
                Tooltip.prototype.setElementContent = function ($element, content) {
                    if (typeof content === 'object' && (content.nodeType || content.jquery)) {
                        // Content is a DOM node or a jQuery
                        if (this.config.html) {
                            if (!jquery_8["default"](content).parent().is($element)) {
                                $element.empty().append(content);
                            }
                        }
                        else {
                            $element.text(jquery_8["default"](content).text());
                        }
                        return;
                    }
                    if (this.config.html) {
                        if (this.config.sanitize) {
                            content = sanitizer_1.sanitizeHtml(content, this.config.whiteList, this.config.sanitizeFn);
                        }
                        $element.html(content);
                    }
                    else {
                        $element.text(content);
                    }
                };
                Tooltip.prototype.getTitle = function () {
                    var title = this.element.getAttribute('data-original-title');
                    if (!title) {
                        title = typeof this.config.title === 'function' ?
                            this.config.title.call(this.element) :
                            this.config.title;
                    }
                    return title;
                };
                // Private
                Tooltip.prototype._getPopperConfig = function (attachment) {
                    var _this = this;
                    var defaultBsConfig = {
                        placement: attachment,
                        modifiers: {
                            offset: this._getOffset(),
                            flip: {
                                behavior: this.config.fallbackPlacement
                            },
                            arrow: {
                                element: SELECTOR_ARROW
                            },
                            preventOverflow: {
                                boundariesElement: this.config.boundary
                            }
                        },
                        onCreate: function (data) {
                            if (data.originalPlacement !== data.placement) {
                                _this._handlePopperPlacementChange(data);
                            }
                        },
                        onUpdate: function (data) { return _this._handlePopperPlacementChange(data); }
                    };
                    return __assign({}, defaultBsConfig, this.config.popperConfig);
                };
                Tooltip.prototype._getOffset = function () {
                    var _this = this;
                    var offset = {};
                    if (typeof this.config.offset === 'function') {
                        offset.fn = function (data) {
                            data.offsets = __assign({}, data.offsets, _this.config.offset(data.offsets, _this.element));
                            return data;
                        };
                    }
                    else {
                        offset.offset = this.config.offset;
                    }
                    return offset;
                };
                Tooltip.prototype._getContainer = function () {
                    if (this.config.container === false) {
                        return document.body;
                    }
                    if (util_7["default"].isElement(this.config.container)) {
                        return jquery_8["default"](this.config.container);
                    }
                    return jquery_8["default"](document).find(this.config.container);
                };
                Tooltip.prototype._getAttachment = function (placement) {
                    return AttachmentMap[placement.toUpperCase()];
                };
                Tooltip.prototype._setListeners = function () {
                    var _this = this;
                    var triggers = this.config.trigger.split(' ');
                    triggers.forEach(function (trigger) {
                        if (trigger === 'click') {
                            jquery_8["default"](_this.element).on(_this.constructor.Event.CLICK, _this.config.selector, function (event) { return _this.toggle(event); });
                        }
                        else if (trigger !== TRIGGER_MANUAL) {
                            var eventIn = trigger === TRIGGER_HOVER ?
                                _this.constructor.Event.MOUSEENTER :
                                _this.constructor.Event.FOCUSIN;
                            var eventOut = trigger === TRIGGER_HOVER ?
                                _this.constructor.Event.MOUSELEAVE :
                                _this.constructor.Event.FOCUSOUT;
                            jquery_8["default"](_this.element)
                                .on(eventIn, _this.config.selector, function (event) { return _this._enter(event); })
                                .on(eventOut, _this.config.selector, function (event) { return _this._leave(event); });
                        }
                    });
                    this._hideModalHandler = function () {
                        if (_this.element) {
                            _this.hide();
                        }
                    };
                    jquery_8["default"](this.element).closest('.modal').on('hide.bs.modal', this._hideModalHandler);
                    if (this.config.selector) {
                        this.config = __assign({}, this.config, { trigger: 'manual', selector: '' });
                    }
                    else {
                        this._fixTitle();
                    }
                };
                Tooltip.prototype._fixTitle = function () {
                    var titleType = typeof this.element.getAttribute('data-original-title');
                    if (this.element.getAttribute('title') || titleType !== 'string') {
                        this.element.setAttribute('data-original-title', this.element.getAttribute('title') || '');
                        this.element.setAttribute('title', '');
                    }
                };
                Tooltip.prototype._enter = function (event, context) {
                    var dataKey = this.constructor.DATA_KEY;
                    context = context || jquery_8["default"](event.currentTarget).data(dataKey);
                    if (!context) {
                        context = new this.constructor(event.currentTarget, this._getDelegateConfig());
                        jquery_8["default"](event.currentTarget).data(dataKey, context);
                    }
                    if (event) {
                        context._activeTrigger[event.type === 'focusin' ? TRIGGER_FOCUS : TRIGGER_HOVER] = true;
                    }
                    if (jquery_8["default"](context.getTipElement()).hasClass(CLASS_NAME_SHOW) || context._hoverState === HOVER_STATE_SHOW) {
                        context._hoverState = HOVER_STATE_SHOW;
                        return;
                    }
                    clearTimeout(context._timeout);
                    context._hoverState = HOVER_STATE_SHOW;
                    if (!context.config.delay || !context.config.delay.show) {
                        context.show();
                        return;
                    }
                    context._timeout = setTimeout(function () {
                        if (context._hoverState === HOVER_STATE_SHOW) {
                            context.show();
                        }
                    }, context.config.delay.show);
                };
                Tooltip.prototype._leave = function (event, context) {
                    var dataKey = this.constructor.DATA_KEY;
                    context = context || jquery_8["default"](event.currentTarget).data(dataKey);
                    if (!context) {
                        context = new this.constructor(event.currentTarget, this._getDelegateConfig());
                        jquery_8["default"](event.currentTarget).data(dataKey, context);
                    }
                    if (event) {
                        context._activeTrigger[event.type === 'focusout' ? TRIGGER_FOCUS : TRIGGER_HOVER] = false;
                    }
                    if (context._isWithActiveTrigger()) {
                        return;
                    }
                    clearTimeout(context._timeout);
                    context._hoverState = HOVER_STATE_OUT;
                    if (!context.config.delay || !context.config.delay.hide) {
                        context.hide();
                        return;
                    }
                    context._timeout = setTimeout(function () {
                        if (context._hoverState === HOVER_STATE_OUT) {
                            context.hide();
                        }
                    }, context.config.delay.hide);
                };
                Tooltip.prototype._isWithActiveTrigger = function () {
                    for (var trigger in this._activeTrigger) {
                        if (this._activeTrigger[trigger]) {
                            return true;
                        }
                    }
                    return false;
                };
                Tooltip.prototype._getConfig = function (config) {
                    var dataAttributes = jquery_8["default"](this.element).data();
                    Object.keys(dataAttributes)
                        .forEach(function (dataAttr) {
                        if (DISALLOWED_ATTRIBUTES.indexOf(dataAttr) !== -1) {
                            delete dataAttributes[dataAttr];
                        }
                    });
                    config = __assign({}, this.constructor.Default, dataAttributes, (typeof config === 'object' && config ? config : {}));
                    if (typeof config.delay === 'number') {
                        config.delay = {
                            show: config.delay,
                            hide: config.delay
                        };
                    }
                    if (typeof config.title === 'number') {
                        config.title = config.title.toString();
                    }
                    if (typeof config.content === 'number') {
                        config.content = config.content.toString();
                    }
                    util_7["default"].typeCheckConfig(NAME, config, this.constructor.DefaultType);
                    if (config.sanitize) {
                        config.template = sanitizer_1.sanitizeHtml(config.template, config.whiteList, config.sanitizeFn);
                    }
                    return config;
                };
                Tooltip.prototype._getDelegateConfig = function () {
                    var config = {};
                    if (this.config) {
                        for (var key in this.config) {
                            if (this.constructor.Default[key] !== this.config[key]) {
                                config[key] = this.config[key];
                            }
                        }
                    }
                    return config;
                };
                Tooltip.prototype._cleanTipClass = function () {
                    var $tip = jquery_8["default"](this.getTipElement());
                    var tabClass = $tip.attr('class').match(BSCLS_PREFIX_REGEX);
                    if (tabClass !== null && tabClass.length) {
                        $tip.removeClass(tabClass.join(''));
                    }
                };
                Tooltip.prototype._handlePopperPlacementChange = function (popperData) {
                    this.tip = popperData.instance.popper;
                    this._cleanTipClass();
                    this.addAttachmentClass(this._getAttachment(popperData.placement));
                };
                Tooltip.prototype._fixTransition = function () {
                    var tip = this.getTipElement();
                    var initConfigAnimation = this.config.animation;
                    if (tip.getAttribute('x-placement') !== null) {
                        return;
                    }
                    jquery_8["default"](tip).removeClass(CLASS_NAME_FADE);
                    this.config.animation = false;
                    this.hide();
                    this.show();
                    this.config.animation = initConfigAnimation;
                };
                // Static
                Tooltip._jQueryInterface = function (config) {
                    return this.each(function () {
                        var $element = jquery_8["default"](this);
                        var data = $element.data(DATA_KEY);
                        var _config = typeof config === 'object' && config;
                        if (!data && /dispose|hide/.test(config)) {
                            return;
                        }
                        if (!data) {
                            data = new Tooltip(this, _config);
                            $element.data(DATA_KEY, data);
                        }
                        if (typeof config === 'string') {
                            if (typeof data[config] === 'undefined') {
                                throw new TypeError("No method named \"" + config + "\"");
                            }
                            data[config]();
                        }
                    });
                };
                return Tooltip;
            }());
            /**
             * jQuery
             */
            jquery_8["default"].fn[NAME] = Tooltip._jQueryInterface;
            jquery_8["default"].fn[NAME].Constructor = Tooltip;
            jquery_8["default"].fn[NAME].noConflict = function () {
                jquery_8["default"].fn[NAME] = JQUERY_NO_CONFLICT;
                return Tooltip._jQueryInterface;
            };
            exports_10("default", Tooltip);
        }
    };
});
/**
 * --------------------------------------------------------------------------
 * Bootstrap (v4.6.1): popover.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */
System.register("popover", ["jquery", "tooltip"], function (exports_11, context_11) {
    "use strict";
    var __moduleName = context_11 && context_11.id;
    var jquery_9, tooltip_2, NAME, VERSION, DATA_KEY, EVENT_KEY, JQUERY_NO_CONFLICT, CLASS_PREFIX, BSCLS_PREFIX_REGEX, CLASS_NAME_FADE, CLASS_NAME_SHOW, SELECTOR_TITLE, SELECTOR_CONTENT, Default, DefaultType, Event, Popover;
    return {
        setters: [
            function (jquery_9_1) {
                jquery_9 = jquery_9_1;
            },
            function (tooltip_2_1) {
                tooltip_2 = tooltip_2_1;
            }
        ],
        execute: function () {/**
             * --------------------------------------------------------------------------
             * Bootstrap (v4.6.1): popover.js
             * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
             * --------------------------------------------------------------------------
             */
            /**
             * Constants
             */
            NAME = 'popover';
            VERSION = '4.6.1';
            DATA_KEY = 'bs.popover';
            EVENT_KEY = "." + DATA_KEY;
            JQUERY_NO_CONFLICT = jquery_9["default"].fn[NAME];
            CLASS_PREFIX = 'bs-popover';
            BSCLS_PREFIX_REGEX = new RegExp("(^|\\s)" + CLASS_PREFIX + "\\S+", 'g');
            CLASS_NAME_FADE = 'fade';
            CLASS_NAME_SHOW = 'show';
            SELECTOR_TITLE = '.popover-header';
            SELECTOR_CONTENT = '.popover-body';
            Default = __assign({}, tooltip_2["default"].Default, { placement: 'right', trigger: 'click', content: '', template: '<div class="popover" role="tooltip">' +
                    '<div class="arrow"></div>' +
                    '<h3 class="popover-header"></h3>' +
                    '<div class="popover-body"></div></div>' });
            DefaultType = __assign({}, tooltip_2["default"].DefaultType, { content: '(string|element|function)' });
            Event = {
                HIDE: "hide" + EVENT_KEY,
                HIDDEN: "hidden" + EVENT_KEY,
                SHOW: "show" + EVENT_KEY,
                SHOWN: "shown" + EVENT_KEY,
                INSERTED: "inserted" + EVENT_KEY,
                CLICK: "click" + EVENT_KEY,
                FOCUSIN: "focusin" + EVENT_KEY,
                FOCUSOUT: "focusout" + EVENT_KEY,
                MOUSEENTER: "mouseenter" + EVENT_KEY,
                MOUSELEAVE: "mouseleave" + EVENT_KEY
            };
            /**
             * Class definition
             */
            Popover = (function (_super) {
                __extends(Popover, _super);
                function Popover() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                Object.defineProperty(Popover, "VERSION", {
                    // Getters
                    get: function () {
                        return VERSION;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Popover, "Default", {
                    get: function () {
                        return Default;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Popover, "NAME", {
                    get: function () {
                        return NAME;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Popover, "DATA_KEY", {
                    get: function () {
                        return DATA_KEY;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Popover, "Event", {
                    get: function () {
                        return Event;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Popover, "EVENT_KEY", {
                    get: function () {
                        return EVENT_KEY;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Popover, "DefaultType", {
                    get: function () {
                        return DefaultType;
                    },
                    enumerable: true,
                    configurable: true
                });
                // Overrides
                Popover.prototype.isWithContent = function () {
                    return this.getTitle() || this._getContent();
                };
                Popover.prototype.addAttachmentClass = function (attachment) {
                    jquery_9["default"](this.getTipElement()).addClass(CLASS_PREFIX + "-" + attachment);
                };
                Popover.prototype.getTipElement = function () {
                    this.tip = this.tip || jquery_9["default"](this.config.template)[0];
                    return this.tip;
                };
                Popover.prototype.setContent = function () {
                    var $tip = jquery_9["default"](this.getTipElement());
                    // We use append for html objects to maintain js events
                    this.setElementContent($tip.find(SELECTOR_TITLE), this.getTitle());
                    var content = this._getContent();
                    if (typeof content === 'function') {
                        content = content.call(this.element);
                    }
                    this.setElementContent($tip.find(SELECTOR_CONTENT), content);
                    $tip.removeClass(CLASS_NAME_FADE + " " + CLASS_NAME_SHOW);
                };
                // Private
                Popover.prototype._getContent = function () {
                    return this.element.getAttribute('data-content') ||
                        this.config.content;
                };
                Popover.prototype._cleanTipClass = function () {
                    var $tip = jquery_9["default"](this.getTipElement());
                    var tabClass = $tip.attr('class').match(BSCLS_PREFIX_REGEX);
                    if (tabClass !== null && tabClass.length > 0) {
                        $tip.removeClass(tabClass.join(''));
                    }
                };
                // Static
                Popover._jQueryInterface = function (config) {
                    return this.each(function () {
                        var data = jquery_9["default"](this).data(DATA_KEY);
                        var _config = typeof config === 'object' ? config : null;
                        if (!data && /dispose|hide/.test(config)) {
                            return;
                        }
                        if (!data) {
                            data = new Popover(this, _config);
                            jquery_9["default"](this).data(DATA_KEY, data);
                        }
                        if (typeof config === 'string') {
                            if (typeof data[config] === 'undefined') {
                                throw new TypeError("No method named \"" + config + "\"");
                            }
                            data[config]();
                        }
                    });
                };
                return Popover;
            }(tooltip_2["default"]));
            /**
             * jQuery
             */
            jquery_9["default"].fn[NAME] = Popover._jQueryInterface;
            jquery_9["default"].fn[NAME].Constructor = Popover;
            jquery_9["default"].fn[NAME].noConflict = function () {
                jquery_9["default"].fn[NAME] = JQUERY_NO_CONFLICT;
                return Popover._jQueryInterface;
            };
            exports_11("default", Popover);
        }
    };
});
/**
 * --------------------------------------------------------------------------
 * Bootstrap (v4.6.1): scrollspy.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */
System.register("scrollspy", ["jquery", "util"], function (exports_12, context_12) {
    "use strict";
    var __moduleName = context_12 && context_12.id;
    var jquery_10, util_8, NAME, VERSION, DATA_KEY, EVENT_KEY, DATA_API_KEY, JQUERY_NO_CONFLICT, CLASS_NAME_DROPDOWN_ITEM, CLASS_NAME_ACTIVE, EVENT_ACTIVATE, EVENT_SCROLL, EVENT_LOAD_DATA_API, METHOD_OFFSET, METHOD_POSITION, SELECTOR_DATA_SPY, SELECTOR_NAV_LIST_GROUP, SELECTOR_NAV_LINKS, SELECTOR_NAV_ITEMS, SELECTOR_LIST_ITEMS, SELECTOR_DROPDOWN, SELECTOR_DROPDOWN_ITEMS, SELECTOR_DROPDOWN_TOGGLE, Default, DefaultType, ScrollSpy;
    return {
        setters: [
            function (jquery_10_1) {
                jquery_10 = jquery_10_1;
            },
            function (util_8_1) {
                util_8 = util_8_1;
            }
        ],
        execute: function () {/**
             * --------------------------------------------------------------------------
             * Bootstrap (v4.6.1): scrollspy.js
             * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
             * --------------------------------------------------------------------------
             */
            /**
             * Constants
             */
            NAME = 'scrollspy';
            VERSION = '4.6.1';
            DATA_KEY = 'bs.scrollspy';
            EVENT_KEY = "." + DATA_KEY;
            DATA_API_KEY = '.data-api';
            JQUERY_NO_CONFLICT = jquery_10["default"].fn[NAME];
            CLASS_NAME_DROPDOWN_ITEM = 'dropdown-item';
            CLASS_NAME_ACTIVE = 'active';
            EVENT_ACTIVATE = "activate" + EVENT_KEY;
            EVENT_SCROLL = "scroll" + EVENT_KEY;
            EVENT_LOAD_DATA_API = "load" + EVENT_KEY + DATA_API_KEY;
            METHOD_OFFSET = 'offset';
            METHOD_POSITION = 'position';
            SELECTOR_DATA_SPY = '[data-spy="scroll"]';
            SELECTOR_NAV_LIST_GROUP = '.nav, .list-group';
            SELECTOR_NAV_LINKS = '.nav-link';
            SELECTOR_NAV_ITEMS = '.nav-item';
            SELECTOR_LIST_ITEMS = '.list-group-item';
            SELECTOR_DROPDOWN = '.dropdown';
            SELECTOR_DROPDOWN_ITEMS = '.dropdown-item';
            SELECTOR_DROPDOWN_TOGGLE = '.dropdown-toggle';
            Default = {
                offset: 10,
                method: 'auto',
                target: ''
            };
            DefaultType = {
                offset: 'number',
                method: 'string',
                target: '(string|element)'
            };
            /**
             * Class definition
             */
            ScrollSpy = (function () {
                function ScrollSpy(element, config) {
                    var _this = this;
                    this._element = element;
                    this._scrollElement = element.tagName === 'BODY' ? window : element;
                    this._config = this._getConfig(config);
                    this._selector = this._config.target + " " + SELECTOR_NAV_LINKS + "," +
                        (this._config.target + " " + SELECTOR_LIST_ITEMS + ",") +
                        (this._config.target + " " + SELECTOR_DROPDOWN_ITEMS);
                    this._offsets = [];
                    this._targets = [];
                    this._activeTarget = null;
                    this._scrollHeight = 0;
                    jquery_10["default"](this._scrollElement).on(EVENT_SCROLL, function (event) { return _this._process(event); });
                    this.refresh();
                    this._process();
                }
                Object.defineProperty(ScrollSpy, "VERSION", {
                    // Getters
                    get: function () {
                        return VERSION;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(ScrollSpy, "Default", {
                    get: function () {
                        return Default;
                    },
                    enumerable: true,
                    configurable: true
                });
                // Public
                ScrollSpy.prototype.refresh = function () {
                    var _this = this;
                    var autoMethod = this._scrollElement === this._scrollElement.window ?
                        METHOD_OFFSET : METHOD_POSITION;
                    var offsetMethod = this._config.method === 'auto' ?
                        autoMethod : this._config.method;
                    var offsetBase = offsetMethod === METHOD_POSITION ?
                        this._getScrollTop() : 0;
                    this._offsets = [];
                    this._targets = [];
                    this._scrollHeight = this._getScrollHeight();
                    var targets = [].slice.call(document.querySelectorAll(this._selector));
                    targets
                        .map(function (element) {
                        var target;
                        var targetSelector = util_8["default"].getSelectorFromElement(element);
                        if (targetSelector) {
                            target = document.querySelector(targetSelector);
                        }
                        if (target) {
                            var targetBCR = target.getBoundingClientRect();
                            if (targetBCR.width || targetBCR.height) {
                                // TODO (fat): remove sketch reliance on jQuery position/offset
                                return [
                                    jquery_10["default"](target)[offsetMethod]().top + offsetBase,
                                    targetSelector
                                ];
                            }
                        }
                        return null;
                    })
                        .filter(function (item) { return item; })
                        .sort(function (a, b) { return a[0] - b[0]; })
                        .forEach(function (item) {
                        _this._offsets.push(item[0]);
                        _this._targets.push(item[1]);
                    });
                };
                ScrollSpy.prototype.dispose = function () {
                    jquery_10["default"].removeData(this._element, DATA_KEY);
                    jquery_10["default"](this._scrollElement).off(EVENT_KEY);
                    this._element = null;
                    this._scrollElement = null;
                    this._config = null;
                    this._selector = null;
                    this._offsets = null;
                    this._targets = null;
                    this._activeTarget = null;
                    this._scrollHeight = null;
                };
                // Private
                ScrollSpy.prototype._getConfig = function (config) {
                    config = __assign({}, Default, (typeof config === 'object' && config ? config : {}));
                    if (typeof config.target !== 'string' && util_8["default"].isElement(config.target)) {
                        var id = jquery_10["default"](config.target).attr('id');
                        if (!id) {
                            id = util_8["default"].getUID(NAME);
                            jquery_10["default"](config.target).attr('id', id);
                        }
                        config.target = "#" + id;
                    }
                    util_8["default"].typeCheckConfig(NAME, config, DefaultType);
                    return config;
                };
                ScrollSpy.prototype._getScrollTop = function () {
                    return this._scrollElement === window ?
                        this._scrollElement.pageYOffset : this._scrollElement.scrollTop;
                };
                ScrollSpy.prototype._getScrollHeight = function () {
                    return this._scrollElement.scrollHeight || Math.max(document.body.scrollHeight, document.documentElement.scrollHeight);
                };
                ScrollSpy.prototype._getOffsetHeight = function () {
                    return this._scrollElement === window ?
                        window.innerHeight : this._scrollElement.getBoundingClientRect().height;
                };
                ScrollSpy.prototype._process = function () {
                    var scrollTop = this._getScrollTop() + this._config.offset;
                    var scrollHeight = this._getScrollHeight();
                    var maxScroll = this._config.offset + scrollHeight - this._getOffsetHeight();
                    if (this._scrollHeight !== scrollHeight) {
                        this.refresh();
                    }
                    if (scrollTop >= maxScroll) {
                        var target = this._targets[this._targets.length - 1];
                        if (this._activeTarget !== target) {
                            this._activate(target);
                        }
                        return;
                    }
                    if (this._activeTarget && scrollTop < this._offsets[0] && this._offsets[0] > 0) {
                        this._activeTarget = null;
                        this._clear();
                        return;
                    }
                    for (var i = this._offsets.length; i--;) {
                        var isActiveTarget = this._activeTarget !== this._targets[i] &&
                            scrollTop >= this._offsets[i] &&
                            (typeof this._offsets[i + 1] === 'undefined' ||
                                scrollTop < this._offsets[i + 1]);
                        if (isActiveTarget) {
                            this._activate(this._targets[i]);
                        }
                    }
                };
                ScrollSpy.prototype._activate = function (target) {
                    this._activeTarget = target;
                    this._clear();
                    var queries = this._selector
                        .split(',')
                        .map(function (selector) { return selector + "[data-target=\"" + target + "\"]," + selector + "[href=\"" + target + "\"]"; });
                    var $link = jquery_10["default"]([].slice.call(document.querySelectorAll(queries.join(','))));
                    if ($link.hasClass(CLASS_NAME_DROPDOWN_ITEM)) {
                        $link.closest(SELECTOR_DROPDOWN)
                            .find(SELECTOR_DROPDOWN_TOGGLE)
                            .addClass(CLASS_NAME_ACTIVE);
                        $link.addClass(CLASS_NAME_ACTIVE);
                    }
                    else {
                        // Set triggered link as active
                        $link.addClass(CLASS_NAME_ACTIVE);
                        // Set triggered links parents as active
                        // With both <ul> and <nav> markup a parent is the previous sibling of any nav ancestor
                        $link.parents(SELECTOR_NAV_LIST_GROUP)
                            .prev(SELECTOR_NAV_LINKS + ", " + SELECTOR_LIST_ITEMS)
                            .addClass(CLASS_NAME_ACTIVE);
                        // Handle special case when .nav-link is inside .nav-item
                        $link.parents(SELECTOR_NAV_LIST_GROUP)
                            .prev(SELECTOR_NAV_ITEMS)
                            .children(SELECTOR_NAV_LINKS)
                            .addClass(CLASS_NAME_ACTIVE);
                    }
                    jquery_10["default"](this._scrollElement).trigger(EVENT_ACTIVATE, {
                        relatedTarget: target
                    });
                };
                ScrollSpy.prototype._clear = function () {
                    [].slice.call(document.querySelectorAll(this._selector))
                        .filter(function (node) { return node.classList.contains(CLASS_NAME_ACTIVE); })
                        .forEach(function (node) { return node.classList.remove(CLASS_NAME_ACTIVE); });
                };
                // Static
                ScrollSpy._jQueryInterface = function (config) {
                    return this.each(function () {
                        var data = jquery_10["default"](this).data(DATA_KEY);
                        var _config = typeof config === 'object' && config;
                        if (!data) {
                            data = new ScrollSpy(this, _config);
                            jquery_10["default"](this).data(DATA_KEY, data);
                        }
                        if (typeof config === 'string') {
                            if (typeof data[config] === 'undefined') {
                                throw new TypeError("No method named \"" + config + "\"");
                            }
                            data[config]();
                        }
                    });
                };
                return ScrollSpy;
            }());
            /**
             * Data API implementation
             */
            jquery_10["default"](window).on(EVENT_LOAD_DATA_API, function () {
                var scrollSpys = [].slice.call(document.querySelectorAll(SELECTOR_DATA_SPY));
                var scrollSpysLength = scrollSpys.length;
                for (var i = scrollSpysLength; i--;) {
                    var $spy = jquery_10["default"](scrollSpys[i]);
                    ScrollSpy._jQueryInterface.call($spy, $spy.data());
                }
            });
            /**
             * jQuery
             */
            jquery_10["default"].fn[NAME] = ScrollSpy._jQueryInterface;
            jquery_10["default"].fn[NAME].Constructor = ScrollSpy;
            jquery_10["default"].fn[NAME].noConflict = function () {
                jquery_10["default"].fn[NAME] = JQUERY_NO_CONFLICT;
                return ScrollSpy._jQueryInterface;
            };
            exports_12("default", ScrollSpy);
        }
    };
});
/**
 * --------------------------------------------------------------------------
 * Bootstrap (v4.6.1): tab.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */
System.register("tab", ["jquery", "util"], function (exports_13, context_13) {
    "use strict";
    var __moduleName = context_13 && context_13.id;
    var jquery_11, util_9, NAME, VERSION, DATA_KEY, EVENT_KEY, DATA_API_KEY, JQUERY_NO_CONFLICT, CLASS_NAME_DROPDOWN_MENU, CLASS_NAME_ACTIVE, CLASS_NAME_DISABLED, CLASS_NAME_FADE, CLASS_NAME_SHOW, EVENT_HIDE, EVENT_HIDDEN, EVENT_SHOW, EVENT_SHOWN, EVENT_CLICK_DATA_API, SELECTOR_DROPDOWN, SELECTOR_NAV_LIST_GROUP, SELECTOR_ACTIVE, SELECTOR_ACTIVE_UL, SELECTOR_DATA_TOGGLE, SELECTOR_DROPDOWN_TOGGLE, SELECTOR_DROPDOWN_ACTIVE_CHILD, Tab;
    return {
        setters: [
            function (jquery_11_1) {
                jquery_11 = jquery_11_1;
            },
            function (util_9_1) {
                util_9 = util_9_1;
            }
        ],
        execute: function () {/**
             * --------------------------------------------------------------------------
             * Bootstrap (v4.6.1): tab.js
             * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
             * --------------------------------------------------------------------------
             */
            /**
             * Constants
             */
            NAME = 'tab';
            VERSION = '4.6.1';
            DATA_KEY = 'bs.tab';
            EVENT_KEY = "." + DATA_KEY;
            DATA_API_KEY = '.data-api';
            JQUERY_NO_CONFLICT = jquery_11["default"].fn[NAME];
            CLASS_NAME_DROPDOWN_MENU = 'dropdown-menu';
            CLASS_NAME_ACTIVE = 'active';
            CLASS_NAME_DISABLED = 'disabled';
            CLASS_NAME_FADE = 'fade';
            CLASS_NAME_SHOW = 'show';
            EVENT_HIDE = "hide" + EVENT_KEY;
            EVENT_HIDDEN = "hidden" + EVENT_KEY;
            EVENT_SHOW = "show" + EVENT_KEY;
            EVENT_SHOWN = "shown" + EVENT_KEY;
            EVENT_CLICK_DATA_API = "click" + EVENT_KEY + DATA_API_KEY;
            SELECTOR_DROPDOWN = '.dropdown';
            SELECTOR_NAV_LIST_GROUP = '.nav, .list-group';
            SELECTOR_ACTIVE = '.active';
            SELECTOR_ACTIVE_UL = '> li > .active';
            SELECTOR_DATA_TOGGLE = '[data-toggle="tab"], [data-toggle="pill"], [data-toggle="list"]';
            SELECTOR_DROPDOWN_TOGGLE = '.dropdown-toggle';
            SELECTOR_DROPDOWN_ACTIVE_CHILD = '> .dropdown-menu .active';
            /**
             * Class definition
             */
            Tab = (function () {
                function Tab(element) {
                    this._element = element;
                }
                Object.defineProperty(Tab, "VERSION", {
                    // Getters
                    get: function () {
                        return VERSION;
                    },
                    enumerable: true,
                    configurable: true
                });
                // Public
                Tab.prototype.show = function () {
                    var _this = this;
                    if (this._element.parentNode &&
                        this._element.parentNode.nodeType === Node.ELEMENT_NODE &&
                        jquery_11["default"](this._element).hasClass(CLASS_NAME_ACTIVE) ||
                        jquery_11["default"](this._element).hasClass(CLASS_NAME_DISABLED)) {
                        return;
                    }
                    var target;
                    var previous;
                    var listElement = jquery_11["default"](this._element).closest(SELECTOR_NAV_LIST_GROUP)[0];
                    var selector = util_9["default"].getSelectorFromElement(this._element);
                    if (listElement) {
                        var itemSelector = listElement.nodeName === 'UL' || listElement.nodeName === 'OL' ? SELECTOR_ACTIVE_UL : SELECTOR_ACTIVE;
                        previous = jquery_11["default"].makeArray(jquery_11["default"](listElement).find(itemSelector));
                        previous = previous[previous.length - 1];
                    }
                    var hideEvent = jquery_11["default"].Event(EVENT_HIDE, {
                        relatedTarget: this._element
                    });
                    var showEvent = jquery_11["default"].Event(EVENT_SHOW, {
                        relatedTarget: previous
                    });
                    if (previous) {
                        jquery_11["default"](previous).trigger(hideEvent);
                    }
                    jquery_11["default"](this._element).trigger(showEvent);
                    if (showEvent.isDefaultPrevented() ||
                        hideEvent.isDefaultPrevented()) {
                        return;
                    }
                    if (selector) {
                        target = document.querySelector(selector);
                    }
                    this._activate(this._element, listElement);
                    var complete = function () {
                        var hiddenEvent = jquery_11["default"].Event(EVENT_HIDDEN, {
                            relatedTarget: _this._element
                        });
                        var shownEvent = jquery_11["default"].Event(EVENT_SHOWN, {
                            relatedTarget: previous
                        });
                        jquery_11["default"](previous).trigger(hiddenEvent);
                        jquery_11["default"](_this._element).trigger(shownEvent);
                    };
                    if (target) {
                        this._activate(target, target.parentNode, complete);
                    }
                    else {
                        complete();
                    }
                };
                Tab.prototype.dispose = function () {
                    jquery_11["default"].removeData(this._element, DATA_KEY);
                    this._element = null;
                };
                // Private
                Tab.prototype._activate = function (element, container, callback) {
                    var _this = this;
                    var activeElements = container && (container.nodeName === 'UL' || container.nodeName === 'OL') ?
                        jquery_11["default"](container).find(SELECTOR_ACTIVE_UL) :
                        jquery_11["default"](container).children(SELECTOR_ACTIVE);
                    var active = activeElements[0];
                    var isTransitioning = callback && (active && jquery_11["default"](active).hasClass(CLASS_NAME_FADE));
                    var complete = function () { return _this._transitionComplete(element, active, callback); };
                    if (active && isTransitioning) {
                        var transitionDuration = util_9["default"].getTransitionDurationFromElement(active);
                        jquery_11["default"](active)
                            .removeClass(CLASS_NAME_SHOW)
                            .one(util_9["default"].TRANSITION_END, complete)
                            .emulateTransitionEnd(transitionDuration);
                    }
                    else {
                        complete();
                    }
                };
                Tab.prototype._transitionComplete = function (element, active, callback) {
                    if (active) {
                        jquery_11["default"](active).removeClass(CLASS_NAME_ACTIVE);
                        var dropdownChild = jquery_11["default"](active.parentNode).find(SELECTOR_DROPDOWN_ACTIVE_CHILD)[0];
                        if (dropdownChild) {
                            jquery_11["default"](dropdownChild).removeClass(CLASS_NAME_ACTIVE);
                        }
                        if (active.getAttribute('role') === 'tab') {
                            active.setAttribute('aria-selected', false);
                        }
                    }
                    jquery_11["default"](element).addClass(CLASS_NAME_ACTIVE);
                    if (element.getAttribute('role') === 'tab') {
                        element.setAttribute('aria-selected', true);
                    }
                    util_9["default"].reflow(element);
                    if (element.classList.contains(CLASS_NAME_FADE)) {
                        element.classList.add(CLASS_NAME_SHOW);
                    }
                    var parent = element.parentNode;
                    if (parent && parent.nodeName === 'LI') {
                        parent = parent.parentNode;
                    }
                    if (parent && jquery_11["default"](parent).hasClass(CLASS_NAME_DROPDOWN_MENU)) {
                        var dropdownElement = jquery_11["default"](element).closest(SELECTOR_DROPDOWN)[0];
                        if (dropdownElement) {
                            var dropdownToggleList = [].slice.call(dropdownElement.querySelectorAll(SELECTOR_DROPDOWN_TOGGLE));
                            jquery_11["default"](dropdownToggleList).addClass(CLASS_NAME_ACTIVE);
                        }
                        element.setAttribute('aria-expanded', true);
                    }
                    if (callback) {
                        callback();
                    }
                };
                // Static
                Tab._jQueryInterface = function (config) {
                    return this.each(function () {
                        var $this = jquery_11["default"](this);
                        var data = $this.data(DATA_KEY);
                        if (!data) {
                            data = new Tab(this);
                            $this.data(DATA_KEY, data);
                        }
                        if (typeof config === 'string') {
                            if (typeof data[config] === 'undefined') {
                                throw new TypeError("No method named \"" + config + "\"");
                            }
                            data[config]();
                        }
                    });
                };
                return Tab;
            }());
            /**
             * Data API implementation
             */
            jquery_11["default"](document)
                .on(EVENT_CLICK_DATA_API, SELECTOR_DATA_TOGGLE, function (event) {
                event.preventDefault();
                Tab._jQueryInterface.call(jquery_11["default"](this), 'show');
            });
            /**
             * jQuery
             */
            jquery_11["default"].fn[NAME] = Tab._jQueryInterface;
            jquery_11["default"].fn[NAME].Constructor = Tab;
            jquery_11["default"].fn[NAME].noConflict = function () {
                jquery_11["default"].fn[NAME] = JQUERY_NO_CONFLICT;
                return Tab._jQueryInterface;
            };
            exports_13("default", Tab);
        }
    };
});
/**
 * --------------------------------------------------------------------------
 * Bootstrap (v4.6.1): toast.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */
System.register("toast", ["jquery", "util"], function (exports_14, context_14) {
    "use strict";
    var __moduleName = context_14 && context_14.id;
    var jquery_12, util_10, NAME, VERSION, DATA_KEY, EVENT_KEY, JQUERY_NO_CONFLICT, CLASS_NAME_FADE, CLASS_NAME_HIDE, CLASS_NAME_SHOW, CLASS_NAME_SHOWING, EVENT_CLICK_DISMISS, EVENT_HIDE, EVENT_HIDDEN, EVENT_SHOW, EVENT_SHOWN, SELECTOR_DATA_DISMISS, Default, DefaultType, Toast;
    return {
        setters: [
            function (jquery_12_1) {
                jquery_12 = jquery_12_1;
            },
            function (util_10_1) {
                util_10 = util_10_1;
            }
        ],
        execute: function () {/**
             * --------------------------------------------------------------------------
             * Bootstrap (v4.6.1): toast.js
             * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
             * --------------------------------------------------------------------------
             */
            /**
             * Constants
             */
            NAME = 'toast';
            VERSION = '4.6.1';
            DATA_KEY = 'bs.toast';
            EVENT_KEY = "." + DATA_KEY;
            JQUERY_NO_CONFLICT = jquery_12["default"].fn[NAME];
            CLASS_NAME_FADE = 'fade';
            CLASS_NAME_HIDE = 'hide';
            CLASS_NAME_SHOW = 'show';
            CLASS_NAME_SHOWING = 'showing';
            EVENT_CLICK_DISMISS = "click.dismiss" + EVENT_KEY;
            EVENT_HIDE = "hide" + EVENT_KEY;
            EVENT_HIDDEN = "hidden" + EVENT_KEY;
            EVENT_SHOW = "show" + EVENT_KEY;
            EVENT_SHOWN = "shown" + EVENT_KEY;
            SELECTOR_DATA_DISMISS = '[data-dismiss="toast"]';
            Default = {
                animation: true,
                autohide: true,
                delay: 500
            };
            DefaultType = {
                animation: 'boolean',
                autohide: 'boolean',
                delay: 'number'
            };
            /**
             * Class definition
             */
            Toast = (function () {
                function Toast(element, config) {
                    this._element = element;
                    this._config = this._getConfig(config);
                    this._timeout = null;
                    this._setListeners();
                }
                Object.defineProperty(Toast, "VERSION", {
                    // Getters
                    get: function () {
                        return VERSION;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Toast, "DefaultType", {
                    get: function () {
                        return DefaultType;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Toast, "Default", {
                    get: function () {
                        return Default;
                    },
                    enumerable: true,
                    configurable: true
                });
                // Public
                Toast.prototype.show = function () {
                    var _this = this;
                    var showEvent = jquery_12["default"].Event(EVENT_SHOW);
                    jquery_12["default"](this._element).trigger(showEvent);
                    if (showEvent.isDefaultPrevented()) {
                        return;
                    }
                    this._clearTimeout();
                    if (this._config.animation) {
                        this._element.classList.add(CLASS_NAME_FADE);
                    }
                    var complete = function () {
                        _this._element.classList.remove(CLASS_NAME_SHOWING);
                        _this._element.classList.add(CLASS_NAME_SHOW);
                        jquery_12["default"](_this._element).trigger(EVENT_SHOWN);
                        if (_this._config.autohide) {
                            _this._timeout = setTimeout(function () {
                                _this.hide();
                            }, _this._config.delay);
                        }
                    };
                    this._element.classList.remove(CLASS_NAME_HIDE);
                    util_10["default"].reflow(this._element);
                    this._element.classList.add(CLASS_NAME_SHOWING);
                    if (this._config.animation) {
                        var transitionDuration = util_10["default"].getTransitionDurationFromElement(this._element);
                        jquery_12["default"](this._element)
                            .one(util_10["default"].TRANSITION_END, complete)
                            .emulateTransitionEnd(transitionDuration);
                    }
                    else {
                        complete();
                    }
                };
                Toast.prototype.hide = function () {
                    if (!this._element.classList.contains(CLASS_NAME_SHOW)) {
                        return;
                    }
                    var hideEvent = jquery_12["default"].Event(EVENT_HIDE);
                    jquery_12["default"](this._element).trigger(hideEvent);
                    if (hideEvent.isDefaultPrevented()) {
                        return;
                    }
                    this._close();
                };
                Toast.prototype.dispose = function () {
                    this._clearTimeout();
                    if (this._element.classList.contains(CLASS_NAME_SHOW)) {
                        this._element.classList.remove(CLASS_NAME_SHOW);
                    }
                    jquery_12["default"](this._element).off(EVENT_CLICK_DISMISS);
                    jquery_12["default"].removeData(this._element, DATA_KEY);
                    this._element = null;
                    this._config = null;
                };
                // Private
                Toast.prototype._getConfig = function (config) {
                    config = __assign({}, Default, jquery_12["default"](this._element).data(), (typeof config === 'object' && config ? config : {}));
                    util_10["default"].typeCheckConfig(NAME, config, this.constructor.DefaultType);
                    return config;
                };
                Toast.prototype._setListeners = function () {
                    var _this = this;
                    jquery_12["default"](this._element).on(EVENT_CLICK_DISMISS, SELECTOR_DATA_DISMISS, function () { return _this.hide(); });
                };
                Toast.prototype._close = function () {
                    var _this = this;
                    var complete = function () {
                        _this._element.classList.add(CLASS_NAME_HIDE);
                        jquery_12["default"](_this._element).trigger(EVENT_HIDDEN);
                    };
                    this._element.classList.remove(CLASS_NAME_SHOW);
                    if (this._config.animation) {
                        var transitionDuration = util_10["default"].getTransitionDurationFromElement(this._element);
                        jquery_12["default"](this._element)
                            .one(util_10["default"].TRANSITION_END, complete)
                            .emulateTransitionEnd(transitionDuration);
                    }
                    else {
                        complete();
                    }
                };
                Toast.prototype._clearTimeout = function () {
                    clearTimeout(this._timeout);
                    this._timeout = null;
                };
                // Static
                Toast._jQueryInterface = function (config) {
                    return this.each(function () {
                        var $element = jquery_12["default"](this);
                        var data = $element.data(DATA_KEY);
                        var _config = typeof config === 'object' && config;
                        if (!data) {
                            data = new Toast(this, _config);
                            $element.data(DATA_KEY, data);
                        }
                        if (typeof config === 'string') {
                            if (typeof data[config] === 'undefined') {
                                throw new TypeError("No method named \"" + config + "\"");
                            }
                            data[config](this);
                        }
                    });
                };
                return Toast;
            }());
            /**
             * jQuery
             */
            jquery_12["default"].fn[NAME] = Toast._jQueryInterface;
            jquery_12["default"].fn[NAME].Constructor = Toast;
            jquery_12["default"].fn[NAME].noConflict = function () {
                jquery_12["default"].fn[NAME] = JQUERY_NO_CONFLICT;
                return Toast._jQueryInterface;
            };
            exports_14("default", Toast);
        }
    };
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
